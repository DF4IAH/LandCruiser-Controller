
LandCruiser-Controller_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000012e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000126e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800100  00800100  000012e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00001358  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b87  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8b  00000000  00000000  000030af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002141  00000000  00000000  00003d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a54  00000000  00000000  00005e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010df4  00000000  00000000  000068d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001859  00000000  00000000  000176c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00018f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000414a  00000000  00000000  0001906d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	57 c0       	rjmp	.+174    	; 0xb0 <__ctors_end>
       2:	00 00       	nop
       4:	74 c0       	rjmp	.+232    	; 0xee <__vector_1>
       6:	00 00       	nop
       8:	95 c0       	rjmp	.+298    	; 0x134 <__vector_2>
       a:	00 00       	nop
       c:	b6 c0       	rjmp	.+364    	; 0x17a <__vector_3>
       e:	00 00       	nop
      10:	d7 c0       	rjmp	.+430    	; 0x1c0 <__vector_4>
      12:	00 00       	nop
      14:	f8 c0       	rjmp	.+496    	; 0x206 <__vector_5>
      16:	00 00       	nop
      18:	19 c1       	rjmp	.+562    	; 0x24c <__vector_6>
      1a:	00 00       	nop
      1c:	3a c1       	rjmp	.+628    	; 0x292 <__vector_7>
      1e:	00 00       	nop
      20:	5b c1       	rjmp	.+694    	; 0x2d8 <__vector_8>
      22:	00 00       	nop
      24:	7c c1       	rjmp	.+760    	; 0x31e <__vector_9>
      26:	00 00       	nop
      28:	9d c1       	rjmp	.+826    	; 0x364 <__vector_10>
      2a:	00 00       	nop
      2c:	be c1       	rjmp	.+892    	; 0x3aa <__vector_11>
      2e:	00 00       	nop
      30:	df c1       	rjmp	.+958    	; 0x3f0 <__vector_12>
      32:	00 00       	nop
      34:	00 c2       	rjmp	.+1024   	; 0x436 <__vector_13>
      36:	00 00       	nop
      38:	3c c2       	rjmp	.+1144   	; 0x4b2 <__vector_14>
      3a:	00 00       	nop
      3c:	5d c2       	rjmp	.+1210   	; 0x4f8 <__vector_15>
      3e:	00 00       	nop
      40:	7e c2       	rjmp	.+1276   	; 0x53e <__vector_16>
      42:	00 00       	nop
      44:	9f c2       	rjmp	.+1342   	; 0x584 <__vector_17>
      46:	00 00       	nop
      48:	c0 c2       	rjmp	.+1408   	; 0x5ca <__vector_18>
      4a:	00 00       	nop
      4c:	e1 c2       	rjmp	.+1474   	; 0x610 <__vector_19>
      4e:	00 00       	nop
      50:	02 c3       	rjmp	.+1540   	; 0x656 <__vector_20>
      52:	00 00       	nop
      54:	23 c3       	rjmp	.+1606   	; 0x69c <__vector_21>
      56:	00 00       	nop
      58:	44 c3       	rjmp	.+1672   	; 0x6e2 <__vector_22>
      5a:	00 00       	nop
      5c:	65 c3       	rjmp	.+1738   	; 0x728 <__vector_23>
      5e:	00 00       	nop
      60:	86 c3       	rjmp	.+1804   	; 0x76e <__vector_24>
      62:	00 00       	nop
      64:	a7 c3       	rjmp	.+1870   	; 0x7b4 <__vector_25>
      66:	00 00       	nop
      68:	b6 04       	cpc	r11, r6
      6a:	d5 04       	cpc	r13, r5
      6c:	11 08       	sbc	r1, r1
      6e:	11 08       	sbc	r1, r1
      70:	11 08       	sbc	r1, r1
      72:	11 08       	sbc	r1, r1
      74:	11 08       	sbc	r1, r1
      76:	11 08       	sbc	r1, r1
      78:	11 08       	sbc	r1, r1
      7a:	11 08       	sbc	r1, r1
      7c:	11 08       	sbc	r1, r1
      7e:	11 08       	sbc	r1, r1
      80:	11 08       	sbc	r1, r1
      82:	11 08       	sbc	r1, r1
      84:	11 08       	sbc	r1, r1
      86:	11 08       	sbc	r1, r1
      88:	7f 05       	cpc	r23, r15
      8a:	1f 06       	cpc	r1, r31
      8c:	11 08       	sbc	r1, r1
      8e:	bf 06       	cpc	r11, r31
      90:	11 08       	sbc	r1, r1
      92:	11 08       	sbc	r1, r1
      94:	11 08       	sbc	r1, r1
      96:	11 08       	sbc	r1, r1
      98:	11 08       	sbc	r1, r1
      9a:	11 08       	sbc	r1, r1
      9c:	11 08       	sbc	r1, r1
      9e:	11 08       	sbc	r1, r1
      a0:	11 08       	sbc	r1, r1
      a2:	11 08       	sbc	r1, r1
      a4:	11 08       	sbc	r1, r1
      a6:	11 08       	sbc	r1, r1
      a8:	c6 06       	cpc	r12, r22
      aa:	3d 07       	cpc	r19, r29
      ac:	de 07       	cpc	r29, r30
      ae:	0b 08       	sbc	r0, r11

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	d8 e0       	ldi	r29, 0x08	; 8
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
      bc:	11 e0       	ldi	r17, 0x01	; 1
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b1 e0       	ldi	r27, 0x01	; 1
      c2:	ee e6       	ldi	r30, 0x6E	; 110
      c4:	f2 e1       	ldi	r31, 0x12	; 18
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x10>
      c8:	05 90       	lpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	a0 30       	cpi	r26, 0x00	; 0
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0xc>

000000d2 <__do_clear_bss>:
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a9 32       	cpi	r26, 0x29	; 41
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	fb d7       	rcall	.+4086   	; 0x10da <main>
      e4:	0c 94 35 09 	jmp	0x126a	; 0x126a <_exit>

000000e8 <asm_break>:

/* Helper functions */

void asm_break(void)
{
	__asm__ __volatile__ ("break" ::: "memory");
      e8:	98 95       	break
	nop();
      ea:	00 00       	nop
      ec:	08 95       	ret

000000ee <__vector_1>:
	asm_break();
}


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
      ee:	1f 92       	push	r1
      f0:	0f 92       	push	r0
      f2:	0f b6       	in	r0, 0x3f	; 63
      f4:	0f 92       	push	r0
      f6:	11 24       	eor	r1, r1
      f8:	2f 93       	push	r18
      fa:	3f 93       	push	r19
      fc:	4f 93       	push	r20
      fe:	5f 93       	push	r21
     100:	6f 93       	push	r22
     102:	7f 93       	push	r23
     104:	8f 93       	push	r24
     106:	9f 93       	push	r25
     108:	af 93       	push	r26
     10a:	bf 93       	push	r27
     10c:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     10e:	ff 93       	push	r31


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
	s_bad_interrupt();
}
     110:	eb df       	rcall	.-42     	; 0xe8 <asm_break>
     112:	ff 91       	pop	r31
     114:	ef 91       	pop	r30
     116:	bf 91       	pop	r27
     118:	af 91       	pop	r26
     11a:	9f 91       	pop	r25
     11c:	8f 91       	pop	r24
     11e:	7f 91       	pop	r23
     120:	6f 91       	pop	r22
     122:	5f 91       	pop	r21
     124:	4f 91       	pop	r20
     126:	3f 91       	pop	r19
     128:	2f 91       	pop	r18
     12a:	0f 90       	pop	r0
     12c:	0f be       	out	0x3f, r0	; 63
     12e:	0f 90       	pop	r0
     130:	1f 90       	pop	r1
     132:	18 95       	reti

00000134 <__vector_2>:

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
     134:	1f 92       	push	r1
     136:	0f 92       	push	r0
     138:	0f b6       	in	r0, 0x3f	; 63
     13a:	0f 92       	push	r0
     13c:	11 24       	eor	r1, r1
     13e:	2f 93       	push	r18
     140:	3f 93       	push	r19
     142:	4f 93       	push	r20
     144:	5f 93       	push	r21
     146:	6f 93       	push	r22
     148:	7f 93       	push	r23
     14a:	8f 93       	push	r24
     14c:	9f 93       	push	r25
     14e:	af 93       	push	r26
     150:	bf 93       	push	r27
     152:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     154:	ff 93       	push	r31
}

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
	s_bad_interrupt();
}
     156:	c8 df       	rcall	.-112    	; 0xe8 <asm_break>
     158:	ff 91       	pop	r31
     15a:	ef 91       	pop	r30
     15c:	bf 91       	pop	r27
     15e:	af 91       	pop	r26
     160:	9f 91       	pop	r25
     162:	8f 91       	pop	r24
     164:	7f 91       	pop	r23
     166:	6f 91       	pop	r22
     168:	5f 91       	pop	r21
     16a:	4f 91       	pop	r20
     16c:	3f 91       	pop	r19
     16e:	2f 91       	pop	r18
     170:	0f 90       	pop	r0
     172:	0f be       	out	0x3f, r0	; 63
     174:	0f 90       	pop	r0
     176:	1f 90       	pop	r1
     178:	18 95       	reti

0000017a <__vector_3>:

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
     17a:	1f 92       	push	r1
     17c:	0f 92       	push	r0
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	0f 92       	push	r0
     182:	11 24       	eor	r1, r1
     184:	2f 93       	push	r18
     186:	3f 93       	push	r19
     188:	4f 93       	push	r20
     18a:	5f 93       	push	r21
     18c:	6f 93       	push	r22
     18e:	7f 93       	push	r23
     190:	8f 93       	push	r24
     192:	9f 93       	push	r25
     194:	af 93       	push	r26
     196:	bf 93       	push	r27
     198:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     19a:	ff 93       	push	r31
}

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
	s_bad_interrupt();
}
     19c:	a5 df       	rcall	.-182    	; 0xe8 <asm_break>
     19e:	ff 91       	pop	r31
     1a0:	ef 91       	pop	r30
     1a2:	bf 91       	pop	r27
     1a4:	af 91       	pop	r26
     1a6:	9f 91       	pop	r25
     1a8:	8f 91       	pop	r24
     1aa:	7f 91       	pop	r23
     1ac:	6f 91       	pop	r22
     1ae:	5f 91       	pop	r21
     1b0:	4f 91       	pop	r20
     1b2:	3f 91       	pop	r19
     1b4:	2f 91       	pop	r18
     1b6:	0f 90       	pop	r0
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	0f 90       	pop	r0
     1bc:	1f 90       	pop	r1
     1be:	18 95       	reti

000001c0 <__vector_4>:

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
     1c0:	1f 92       	push	r1
     1c2:	0f 92       	push	r0
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	0f 92       	push	r0
     1c8:	11 24       	eor	r1, r1
     1ca:	2f 93       	push	r18
     1cc:	3f 93       	push	r19
     1ce:	4f 93       	push	r20
     1d0:	5f 93       	push	r21
     1d2:	6f 93       	push	r22
     1d4:	7f 93       	push	r23
     1d6:	8f 93       	push	r24
     1d8:	9f 93       	push	r25
     1da:	af 93       	push	r26
     1dc:	bf 93       	push	r27
     1de:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     1e0:	ff 93       	push	r31
}

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
	s_bad_interrupt();
}
     1e2:	82 df       	rcall	.-252    	; 0xe8 <asm_break>
     1e4:	ff 91       	pop	r31
     1e6:	ef 91       	pop	r30
     1e8:	bf 91       	pop	r27
     1ea:	af 91       	pop	r26
     1ec:	9f 91       	pop	r25
     1ee:	8f 91       	pop	r24
     1f0:	7f 91       	pop	r23
     1f2:	6f 91       	pop	r22
     1f4:	5f 91       	pop	r21
     1f6:	4f 91       	pop	r20
     1f8:	3f 91       	pop	r19
     1fa:	2f 91       	pop	r18
     1fc:	0f 90       	pop	r0
     1fe:	0f be       	out	0x3f, r0	; 63
     200:	0f 90       	pop	r0
     202:	1f 90       	pop	r1
     204:	18 95       	reti

00000206 <__vector_5>:

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
     206:	1f 92       	push	r1
     208:	0f 92       	push	r0
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	0f 92       	push	r0
     20e:	11 24       	eor	r1, r1
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     226:	ff 93       	push	r31
}

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
	s_bad_interrupt();
}
     228:	5f df       	rcall	.-322    	; 0xe8 <asm_break>
     22a:	ff 91       	pop	r31
     22c:	ef 91       	pop	r30
     22e:	bf 91       	pop	r27
     230:	af 91       	pop	r26
     232:	9f 91       	pop	r25
     234:	8f 91       	pop	r24
     236:	7f 91       	pop	r23
     238:	6f 91       	pop	r22
     23a:	5f 91       	pop	r21
     23c:	4f 91       	pop	r20
     23e:	3f 91       	pop	r19
     240:	2f 91       	pop	r18
     242:	0f 90       	pop	r0
     244:	0f be       	out	0x3f, r0	; 63
     246:	0f 90       	pop	r0
     248:	1f 90       	pop	r1
     24a:	18 95       	reti

0000024c <__vector_6>:

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
     24c:	1f 92       	push	r1
     24e:	0f 92       	push	r0
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	0f 92       	push	r0
     254:	11 24       	eor	r1, r1
     256:	2f 93       	push	r18
     258:	3f 93       	push	r19
     25a:	4f 93       	push	r20
     25c:	5f 93       	push	r21
     25e:	6f 93       	push	r22
     260:	7f 93       	push	r23
     262:	8f 93       	push	r24
     264:	9f 93       	push	r25
     266:	af 93       	push	r26
     268:	bf 93       	push	r27
     26a:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     26c:	ff 93       	push	r31
}

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
	s_bad_interrupt();
}
     26e:	3c df       	rcall	.-392    	; 0xe8 <asm_break>
     270:	ff 91       	pop	r31
     272:	ef 91       	pop	r30
     274:	bf 91       	pop	r27
     276:	af 91       	pop	r26
     278:	9f 91       	pop	r25
     27a:	8f 91       	pop	r24
     27c:	7f 91       	pop	r23
     27e:	6f 91       	pop	r22
     280:	5f 91       	pop	r21
     282:	4f 91       	pop	r20
     284:	3f 91       	pop	r19
     286:	2f 91       	pop	r18
     288:	0f 90       	pop	r0
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	0f 90       	pop	r0
     28e:	1f 90       	pop	r1
     290:	18 95       	reti

00000292 <__vector_7>:

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
     292:	1f 92       	push	r1
     294:	0f 92       	push	r0
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	0f 92       	push	r0
     29a:	11 24       	eor	r1, r1
     29c:	2f 93       	push	r18
     29e:	3f 93       	push	r19
     2a0:	4f 93       	push	r20
     2a2:	5f 93       	push	r21
     2a4:	6f 93       	push	r22
     2a6:	7f 93       	push	r23
     2a8:	8f 93       	push	r24
     2aa:	9f 93       	push	r25
     2ac:	af 93       	push	r26
     2ae:	bf 93       	push	r27
     2b0:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     2b2:	ff 93       	push	r31
}

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
	s_bad_interrupt();
}
     2b4:	19 df       	rcall	.-462    	; 0xe8 <asm_break>
     2b6:	ff 91       	pop	r31
     2b8:	ef 91       	pop	r30
     2ba:	bf 91       	pop	r27
     2bc:	af 91       	pop	r26
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	7f 91       	pop	r23
     2c4:	6f 91       	pop	r22
     2c6:	5f 91       	pop	r21
     2c8:	4f 91       	pop	r20
     2ca:	3f 91       	pop	r19
     2cc:	2f 91       	pop	r18
     2ce:	0f 90       	pop	r0
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	0f 90       	pop	r0
     2d4:	1f 90       	pop	r1
     2d6:	18 95       	reti

000002d8 <__vector_8>:

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
     2d8:	1f 92       	push	r1
     2da:	0f 92       	push	r0
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	0f 92       	push	r0
     2e0:	11 24       	eor	r1, r1
     2e2:	2f 93       	push	r18
     2e4:	3f 93       	push	r19
     2e6:	4f 93       	push	r20
     2e8:	5f 93       	push	r21
     2ea:	6f 93       	push	r22
     2ec:	7f 93       	push	r23
     2ee:	8f 93       	push	r24
     2f0:	9f 93       	push	r25
     2f2:	af 93       	push	r26
     2f4:	bf 93       	push	r27
     2f6:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     2f8:	ff 93       	push	r31
}

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
	s_bad_interrupt();
}
     2fa:	f6 de       	rcall	.-532    	; 0xe8 <asm_break>
     2fc:	ff 91       	pop	r31
     2fe:	ef 91       	pop	r30
     300:	bf 91       	pop	r27
     302:	af 91       	pop	r26
     304:	9f 91       	pop	r25
     306:	8f 91       	pop	r24
     308:	7f 91       	pop	r23
     30a:	6f 91       	pop	r22
     30c:	5f 91       	pop	r21
     30e:	4f 91       	pop	r20
     310:	3f 91       	pop	r19
     312:	2f 91       	pop	r18
     314:	0f 90       	pop	r0
     316:	0f be       	out	0x3f, r0	; 63
     318:	0f 90       	pop	r0
     31a:	1f 90       	pop	r1
     31c:	18 95       	reti

0000031e <__vector_9>:

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
     31e:	1f 92       	push	r1
     320:	0f 92       	push	r0
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	0f 92       	push	r0
     326:	11 24       	eor	r1, r1
     328:	2f 93       	push	r18
     32a:	3f 93       	push	r19
     32c:	4f 93       	push	r20
     32e:	5f 93       	push	r21
     330:	6f 93       	push	r22
     332:	7f 93       	push	r23
     334:	8f 93       	push	r24
     336:	9f 93       	push	r25
     338:	af 93       	push	r26
     33a:	bf 93       	push	r27
     33c:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     33e:	ff 93       	push	r31
		g_audio_out_loudness = 0;
	}
	#else
	s_bad_interrupt();
	#endif
}
     340:	d3 de       	rcall	.-602    	; 0xe8 <asm_break>
     342:	ff 91       	pop	r31
     344:	ef 91       	pop	r30
     346:	bf 91       	pop	r27
     348:	af 91       	pop	r26
     34a:	9f 91       	pop	r25
     34c:	8f 91       	pop	r24
     34e:	7f 91       	pop	r23
     350:	6f 91       	pop	r22
     352:	5f 91       	pop	r21
     354:	4f 91       	pop	r20
     356:	3f 91       	pop	r19
     358:	2f 91       	pop	r18
     35a:	0f 90       	pop	r0
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	0f 90       	pop	r0
     360:	1f 90       	pop	r1
     362:	18 95       	reti

00000364 <__vector_10>:

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
     364:	1f 92       	push	r1
     366:	0f 92       	push	r0
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	0f 92       	push	r0
     36c:	11 24       	eor	r1, r1
     36e:	2f 93       	push	r18
     370:	3f 93       	push	r19
     372:	4f 93       	push	r20
     374:	5f 93       	push	r21
     376:	6f 93       	push	r22
     378:	7f 93       	push	r23
     37a:	8f 93       	push	r24
     37c:	9f 93       	push	r25
     37e:	af 93       	push	r26
     380:	bf 93       	push	r27
     382:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     384:	ff 93       	push	r31
}

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
	s_bad_interrupt();
}
     386:	b0 de       	rcall	.-672    	; 0xe8 <asm_break>
     388:	ff 91       	pop	r31
     38a:	ef 91       	pop	r30
     38c:	bf 91       	pop	r27
     38e:	af 91       	pop	r26
     390:	9f 91       	pop	r25
     392:	8f 91       	pop	r24
     394:	7f 91       	pop	r23
     396:	6f 91       	pop	r22
     398:	5f 91       	pop	r21
     39a:	4f 91       	pop	r20
     39c:	3f 91       	pop	r19
     39e:	2f 91       	pop	r18
     3a0:	0f 90       	pop	r0
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	0f 90       	pop	r0
     3a6:	1f 90       	pop	r1
     3a8:	18 95       	reti

000003aa <__vector_11>:

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
     3aa:	1f 92       	push	r1
     3ac:	0f 92       	push	r0
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	0f 92       	push	r0
     3b2:	11 24       	eor	r1, r1
     3b4:	2f 93       	push	r18
     3b6:	3f 93       	push	r19
     3b8:	4f 93       	push	r20
     3ba:	5f 93       	push	r21
     3bc:	6f 93       	push	r22
     3be:	7f 93       	push	r23
     3c0:	8f 93       	push	r24
     3c2:	9f 93       	push	r25
     3c4:	af 93       	push	r26
     3c6:	bf 93       	push	r27
     3c8:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     3ca:	ff 93       	push	r31
}

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
	s_bad_interrupt();
}
     3cc:	8d de       	rcall	.-742    	; 0xe8 <asm_break>
     3ce:	ff 91       	pop	r31
     3d0:	ef 91       	pop	r30
     3d2:	bf 91       	pop	r27
     3d4:	af 91       	pop	r26
     3d6:	9f 91       	pop	r25
     3d8:	8f 91       	pop	r24
     3da:	7f 91       	pop	r23
     3dc:	6f 91       	pop	r22
     3de:	5f 91       	pop	r21
     3e0:	4f 91       	pop	r20
     3e2:	3f 91       	pop	r19
     3e4:	2f 91       	pop	r18
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <__vector_12>:

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	2f 93       	push	r18
     3fc:	3f 93       	push	r19
     3fe:	4f 93       	push	r20
     400:	5f 93       	push	r21
     402:	6f 93       	push	r22
     404:	7f 93       	push	r23
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
     40a:	af 93       	push	r26
     40c:	bf 93       	push	r27
     40e:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     410:	ff 93       	push	r31
}

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
	s_bad_interrupt();
}
     412:	6a de       	rcall	.-812    	; 0xe8 <asm_break>
     414:	ff 91       	pop	r31
     416:	ef 91       	pop	r30
     418:	bf 91       	pop	r27
     41a:	af 91       	pop	r26
     41c:	9f 91       	pop	r25
     41e:	8f 91       	pop	r24
     420:	7f 91       	pop	r23
     422:	6f 91       	pop	r22
     424:	5f 91       	pop	r21
     426:	4f 91       	pop	r20
     428:	3f 91       	pop	r19
     42a:	2f 91       	pop	r18
     42c:	0f 90       	pop	r0
     42e:	0f be       	out	0x3f, r0	; 63
     430:	0f 90       	pop	r0
     432:	1f 90       	pop	r1
     434:	18 95       	reti

00000436 <__vector_13>:

ISR(__vector_13, ISR_BLOCK)
{	/* TIMER 1 OVF - Overflow */
     436:	1f 92       	push	r1
     438:	0f 92       	push	r0
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	0f 92       	push	r0
     43e:	11 24       	eor	r1, r1
     440:	2f 93       	push	r18
     442:	3f 93       	push	r19
     444:	4f 93       	push	r20
     446:	5f 93       	push	r21
     448:	6f 93       	push	r22
     44a:	7f 93       	push	r23
     44c:	8f 93       	push	r24
     44e:	9f 93       	push	r25
     450:	af 93       	push	r26
	++g_timer_abs_msb;
     452:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <g_timer_abs_msb>
     456:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <g_timer_abs_msb+0x1>
     45a:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <g_timer_abs_msb+0x2>
     45e:	50 91 24 01 	lds	r21, 0x0124	; 0x800124 <g_timer_abs_msb+0x3>
     462:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <g_timer_abs_msb+0x4>
     466:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <g_timer_abs_msb+0x5>
     46a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <g_timer_abs_msb+0x6>
     46e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <g_timer_abs_msb+0x7>
     472:	a1 e0       	ldi	r26, 0x01	; 1
     474:	c3 d6       	rcall	.+3462   	; 0x11fc <__adddi3_s8>
     476:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <g_timer_abs_msb>
     47a:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <g_timer_abs_msb+0x1>
     47e:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <g_timer_abs_msb+0x2>
     482:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <g_timer_abs_msb+0x3>
     486:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <g_timer_abs_msb+0x4>
     48a:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <g_timer_abs_msb+0x5>
     48e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <g_timer_abs_msb+0x6>
     492:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <g_timer_abs_msb+0x7>
	cpu_irq_enable();
	//adc_start_conversion();					// TODO ???
	enter_sleep(SLEEP_MODE_ADC);
	adc_disable_interrupt();
	#endif
}
     496:	af 91       	pop	r26
     498:	9f 91       	pop	r25
     49a:	8f 91       	pop	r24
     49c:	7f 91       	pop	r23
     49e:	6f 91       	pop	r22
     4a0:	5f 91       	pop	r21
     4a2:	4f 91       	pop	r20
     4a4:	3f 91       	pop	r19
     4a6:	2f 91       	pop	r18
     4a8:	0f 90       	pop	r0
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	0f 90       	pop	r0
     4ae:	1f 90       	pop	r1
     4b0:	18 95       	reti

000004b2 <__vector_14>:

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	2f 93       	push	r18
     4be:	3f 93       	push	r19
     4c0:	4f 93       	push	r20
     4c2:	5f 93       	push	r21
     4c4:	6f 93       	push	r22
     4c6:	7f 93       	push	r23
     4c8:	8f 93       	push	r24
     4ca:	9f 93       	push	r25
     4cc:	af 93       	push	r26
     4ce:	bf 93       	push	r27
     4d0:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     4d2:	ff 93       	push	r31
}

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
	s_bad_interrupt();
}
     4d4:	09 de       	rcall	.-1006   	; 0xe8 <asm_break>
     4d6:	ff 91       	pop	r31
     4d8:	ef 91       	pop	r30
     4da:	bf 91       	pop	r27
     4dc:	af 91       	pop	r26
     4de:	9f 91       	pop	r25
     4e0:	8f 91       	pop	r24
     4e2:	7f 91       	pop	r23
     4e4:	6f 91       	pop	r22
     4e6:	5f 91       	pop	r21
     4e8:	4f 91       	pop	r20
     4ea:	3f 91       	pop	r19
     4ec:	2f 91       	pop	r18
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <__vector_15>:

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
     4f8:	1f 92       	push	r1
     4fa:	0f 92       	push	r0
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	0f 92       	push	r0
     500:	11 24       	eor	r1, r1
     502:	2f 93       	push	r18
     504:	3f 93       	push	r19
     506:	4f 93       	push	r20
     508:	5f 93       	push	r21
     50a:	6f 93       	push	r22
     50c:	7f 93       	push	r23
     50e:	8f 93       	push	r24
     510:	9f 93       	push	r25
     512:	af 93       	push	r26
     514:	bf 93       	push	r27
     516:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     518:	ff 93       	push	r31
}

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
	s_bad_interrupt();
}
     51a:	e6 dd       	rcall	.-1076   	; 0xe8 <asm_break>
     51c:	ff 91       	pop	r31
     51e:	ef 91       	pop	r30
     520:	bf 91       	pop	r27
     522:	af 91       	pop	r26
     524:	9f 91       	pop	r25
     526:	8f 91       	pop	r24
     528:	7f 91       	pop	r23
     52a:	6f 91       	pop	r22
     52c:	5f 91       	pop	r21
     52e:	4f 91       	pop	r20
     530:	3f 91       	pop	r19
     532:	2f 91       	pop	r18
     534:	0f 90       	pop	r0
     536:	0f be       	out	0x3f, r0	; 63
     538:	0f 90       	pop	r0
     53a:	1f 90       	pop	r1
     53c:	18 95       	reti

0000053e <__vector_16>:

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
     53e:	1f 92       	push	r1
     540:	0f 92       	push	r0
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	0f 92       	push	r0
     546:	11 24       	eor	r1, r1
     548:	2f 93       	push	r18
     54a:	3f 93       	push	r19
     54c:	4f 93       	push	r20
     54e:	5f 93       	push	r21
     550:	6f 93       	push	r22
     552:	7f 93       	push	r23
     554:	8f 93       	push	r24
     556:	9f 93       	push	r25
     558:	af 93       	push	r26
     55a:	bf 93       	push	r27
     55c:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     55e:	ff 93       	push	r31
	enter_sleep(SLEEP_MODE_ADC);
	adc_disable_interrupt();
	#else
	s_bad_interrupt();
	#endif
}
     560:	c3 dd       	rcall	.-1146   	; 0xe8 <asm_break>
     562:	ff 91       	pop	r31
     564:	ef 91       	pop	r30
     566:	bf 91       	pop	r27
     568:	af 91       	pop	r26
     56a:	9f 91       	pop	r25
     56c:	8f 91       	pop	r24
     56e:	7f 91       	pop	r23
     570:	6f 91       	pop	r22
     572:	5f 91       	pop	r21
     574:	4f 91       	pop	r20
     576:	3f 91       	pop	r19
     578:	2f 91       	pop	r18
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <__vector_17>:

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	11 24       	eor	r1, r1
     58e:	2f 93       	push	r18
     590:	3f 93       	push	r19
     592:	4f 93       	push	r20
     594:	5f 93       	push	r21
     596:	6f 93       	push	r22
     598:	7f 93       	push	r23
     59a:	8f 93       	push	r24
     59c:	9f 93       	push	r25
     59e:	af 93       	push	r26
     5a0:	bf 93       	push	r27
     5a2:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     5a4:	ff 93       	push	r31
}

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
	s_bad_interrupt();
}
     5a6:	a0 dd       	rcall	.-1216   	; 0xe8 <asm_break>
     5a8:	ff 91       	pop	r31
     5aa:	ef 91       	pop	r30
     5ac:	bf 91       	pop	r27
     5ae:	af 91       	pop	r26
     5b0:	9f 91       	pop	r25
     5b2:	8f 91       	pop	r24
     5b4:	7f 91       	pop	r23
     5b6:	6f 91       	pop	r22
     5b8:	5f 91       	pop	r21
     5ba:	4f 91       	pop	r20
     5bc:	3f 91       	pop	r19
     5be:	2f 91       	pop	r18
     5c0:	0f 90       	pop	r0
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	0f 90       	pop	r0
     5c6:	1f 90       	pop	r1
     5c8:	18 95       	reti

000005ca <__vector_18>:

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
     5ca:	1f 92       	push	r1
     5cc:	0f 92       	push	r0
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	0f 92       	push	r0
     5d2:	11 24       	eor	r1, r1
     5d4:	2f 93       	push	r18
     5d6:	3f 93       	push	r19
     5d8:	4f 93       	push	r20
     5da:	5f 93       	push	r21
     5dc:	6f 93       	push	r22
     5de:	7f 93       	push	r23
     5e0:	8f 93       	push	r24
     5e2:	9f 93       	push	r25
     5e4:	af 93       	push	r26
     5e6:	bf 93       	push	r27
     5e8:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     5ea:	ff 93       	push	r31
}

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
	s_bad_interrupt();
}
     5ec:	7d dd       	rcall	.-1286   	; 0xe8 <asm_break>
     5ee:	ff 91       	pop	r31
     5f0:	ef 91       	pop	r30
     5f2:	bf 91       	pop	r27
     5f4:	af 91       	pop	r26
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	7f 91       	pop	r23
     5fc:	6f 91       	pop	r22
     5fe:	5f 91       	pop	r21
     600:	4f 91       	pop	r20
     602:	3f 91       	pop	r19
     604:	2f 91       	pop	r18
     606:	0f 90       	pop	r0
     608:	0f be       	out	0x3f, r0	; 63
     60a:	0f 90       	pop	r0
     60c:	1f 90       	pop	r1
     60e:	18 95       	reti

00000610 <__vector_19>:

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
     610:	1f 92       	push	r1
     612:	0f 92       	push	r0
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	0f 92       	push	r0
     618:	11 24       	eor	r1, r1
     61a:	2f 93       	push	r18
     61c:	3f 93       	push	r19
     61e:	4f 93       	push	r20
     620:	5f 93       	push	r21
     622:	6f 93       	push	r22
     624:	7f 93       	push	r23
     626:	8f 93       	push	r24
     628:	9f 93       	push	r25
     62a:	af 93       	push	r26
     62c:	bf 93       	push	r27
     62e:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     630:	ff 93       	push	r31
}

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
	s_bad_interrupt();
}
     632:	5a dd       	rcall	.-1356   	; 0xe8 <asm_break>
     634:	ff 91       	pop	r31
     636:	ef 91       	pop	r30
     638:	bf 91       	pop	r27
     63a:	af 91       	pop	r26
     63c:	9f 91       	pop	r25
     63e:	8f 91       	pop	r24
     640:	7f 91       	pop	r23
     642:	6f 91       	pop	r22
     644:	5f 91       	pop	r21
     646:	4f 91       	pop	r20
     648:	3f 91       	pop	r19
     64a:	2f 91       	pop	r18
     64c:	0f 90       	pop	r0
     64e:	0f be       	out	0x3f, r0	; 63
     650:	0f 90       	pop	r0
     652:	1f 90       	pop	r1
     654:	18 95       	reti

00000656 <__vector_20>:

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
     656:	1f 92       	push	r1
     658:	0f 92       	push	r0
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	0f 92       	push	r0
     65e:	11 24       	eor	r1, r1
     660:	2f 93       	push	r18
     662:	3f 93       	push	r19
     664:	4f 93       	push	r20
     666:	5f 93       	push	r21
     668:	6f 93       	push	r22
     66a:	7f 93       	push	r23
     66c:	8f 93       	push	r24
     66e:	9f 93       	push	r25
     670:	af 93       	push	r26
     672:	bf 93       	push	r27
     674:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     676:	ff 93       	push	r31
}

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
	s_bad_interrupt();
}
     678:	37 dd       	rcall	.-1426   	; 0xe8 <asm_break>
     67a:	ff 91       	pop	r31
     67c:	ef 91       	pop	r30
     67e:	bf 91       	pop	r27
     680:	af 91       	pop	r26
     682:	9f 91       	pop	r25
     684:	8f 91       	pop	r24
     686:	7f 91       	pop	r23
     688:	6f 91       	pop	r22
     68a:	5f 91       	pop	r21
     68c:	4f 91       	pop	r20
     68e:	3f 91       	pop	r19
     690:	2f 91       	pop	r18
     692:	0f 90       	pop	r0
     694:	0f be       	out	0x3f, r0	; 63
     696:	0f 90       	pop	r0
     698:	1f 90       	pop	r1
     69a:	18 95       	reti

0000069c <__vector_21>:

ISR(__vector_21, ISR_BLOCK)
{	/* ADC */
     69c:	1f 92       	push	r1
     69e:	0f 92       	push	r0
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	0f 92       	push	r0
     6a4:	11 24       	eor	r1, r1
     6a6:	2f 93       	push	r18
     6a8:	3f 93       	push	r19
     6aa:	4f 93       	push	r20
     6ac:	5f 93       	push	r21
     6ae:	6f 93       	push	r22
     6b0:	7f 93       	push	r23
     6b2:	8f 93       	push	r24
     6b4:	9f 93       	push	r25
     6b6:	af 93       	push	r26
     6b8:	bf 93       	push	r27
     6ba:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     6bc:	ff 93       	push	r31
			g_adc_state = ADC_STATE_PRE_LDR;
	}
	#else
	s_bad_interrupt();
	#endif
}
     6be:	14 dd       	rcall	.-1496   	; 0xe8 <asm_break>
     6c0:	ff 91       	pop	r31
     6c2:	ef 91       	pop	r30
     6c4:	bf 91       	pop	r27
     6c6:	af 91       	pop	r26
     6c8:	9f 91       	pop	r25
     6ca:	8f 91       	pop	r24
     6cc:	7f 91       	pop	r23
     6ce:	6f 91       	pop	r22
     6d0:	5f 91       	pop	r21
     6d2:	4f 91       	pop	r20
     6d4:	3f 91       	pop	r19
     6d6:	2f 91       	pop	r18
     6d8:	0f 90       	pop	r0
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	0f 90       	pop	r0
     6de:	1f 90       	pop	r1
     6e0:	18 95       	reti

000006e2 <__vector_22>:

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
     6e2:	1f 92       	push	r1
     6e4:	0f 92       	push	r0
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	0f 92       	push	r0
     6ea:	11 24       	eor	r1, r1
     6ec:	2f 93       	push	r18
     6ee:	3f 93       	push	r19
     6f0:	4f 93       	push	r20
     6f2:	5f 93       	push	r21
     6f4:	6f 93       	push	r22
     6f6:	7f 93       	push	r23
     6f8:	8f 93       	push	r24
     6fa:	9f 93       	push	r25
     6fc:	af 93       	push	r26
     6fe:	bf 93       	push	r27
     700:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     702:	ff 93       	push	r31
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
	s_bad_interrupt();
}
     704:	f1 dc       	rcall	.-1566   	; 0xe8 <asm_break>
     706:	ff 91       	pop	r31
     708:	ef 91       	pop	r30
     70a:	bf 91       	pop	r27
     70c:	af 91       	pop	r26
     70e:	9f 91       	pop	r25
     710:	8f 91       	pop	r24
     712:	7f 91       	pop	r23
     714:	6f 91       	pop	r22
     716:	5f 91       	pop	r21
     718:	4f 91       	pop	r20
     71a:	3f 91       	pop	r19
     71c:	2f 91       	pop	r18
     71e:	0f 90       	pop	r0
     720:	0f be       	out	0x3f, r0	; 63
     722:	0f 90       	pop	r0
     724:	1f 90       	pop	r1
     726:	18 95       	reti

00000728 <__vector_23>:

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
     728:	1f 92       	push	r1
     72a:	0f 92       	push	r0
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	0f 92       	push	r0
     730:	11 24       	eor	r1, r1
     732:	2f 93       	push	r18
     734:	3f 93       	push	r19
     736:	4f 93       	push	r20
     738:	5f 93       	push	r21
     73a:	6f 93       	push	r22
     73c:	7f 93       	push	r23
     73e:	8f 93       	push	r24
     740:	9f 93       	push	r25
     742:	af 93       	push	r26
     744:	bf 93       	push	r27
     746:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     748:	ff 93       	push	r31
}

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
	s_bad_interrupt();
}
     74a:	ce dc       	rcall	.-1636   	; 0xe8 <asm_break>
     74c:	ff 91       	pop	r31
     74e:	ef 91       	pop	r30
     750:	bf 91       	pop	r27
     752:	af 91       	pop	r26
     754:	9f 91       	pop	r25
     756:	8f 91       	pop	r24
     758:	7f 91       	pop	r23
     75a:	6f 91       	pop	r22
     75c:	5f 91       	pop	r21
     75e:	4f 91       	pop	r20
     760:	3f 91       	pop	r19
     762:	2f 91       	pop	r18
     764:	0f 90       	pop	r0
     766:	0f be       	out	0x3f, r0	; 63
     768:	0f 90       	pop	r0
     76a:	1f 90       	pop	r1
     76c:	18 95       	reti

0000076e <__vector_24>:

ISR(__vector_24, ISR_BLOCK)
{	/* TWI */
     76e:	1f 92       	push	r1
     770:	0f 92       	push	r0
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	0f 92       	push	r0
     776:	11 24       	eor	r1, r1
     778:	2f 93       	push	r18
     77a:	3f 93       	push	r19
     77c:	4f 93       	push	r20
     77e:	5f 93       	push	r21
     780:	6f 93       	push	r22
     782:	7f 93       	push	r23
     784:	8f 93       	push	r24
     786:	9f 93       	push	r25
     788:	af 93       	push	r26
     78a:	bf 93       	push	r27
     78c:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     78e:	ff 93       	push	r31
	uint8_t twcr_new = __vector_24__bottom(tws, twd, twcr_cur);
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
	#else
	s_bad_interrupt();
	#endif
}
     790:	ab dc       	rcall	.-1706   	; 0xe8 <asm_break>
     792:	ff 91       	pop	r31
     794:	ef 91       	pop	r30
     796:	bf 91       	pop	r27
     798:	af 91       	pop	r26
     79a:	9f 91       	pop	r25
     79c:	8f 91       	pop	r24
     79e:	7f 91       	pop	r23
     7a0:	6f 91       	pop	r22
     7a2:	5f 91       	pop	r21
     7a4:	4f 91       	pop	r20
     7a6:	3f 91       	pop	r19
     7a8:	2f 91       	pop	r18
     7aa:	0f 90       	pop	r0
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	0f 90       	pop	r0
     7b0:	1f 90       	pop	r1
     7b2:	18 95       	reti

000007b4 <__vector_25>:

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
     7b4:	1f 92       	push	r1
     7b6:	0f 92       	push	r0
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	0f 92       	push	r0
     7bc:	11 24       	eor	r1, r1
     7be:	2f 93       	push	r18
     7c0:	3f 93       	push	r19
     7c2:	4f 93       	push	r20
     7c4:	5f 93       	push	r21
     7c6:	6f 93       	push	r22
     7c8:	7f 93       	push	r23
     7ca:	8f 93       	push	r24
     7cc:	9f 93       	push	r25
     7ce:	af 93       	push	r26
     7d0:	bf 93       	push	r27
     7d2:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     7d4:	ff 93       	push	r31
}

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
	s_bad_interrupt();
}
     7d6:	88 dc       	rcall	.-1776   	; 0xe8 <asm_break>
     7d8:	ff 91       	pop	r31
     7da:	ef 91       	pop	r30
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	7f 91       	pop	r23
     7e6:	6f 91       	pop	r22
     7e8:	5f 91       	pop	r21
     7ea:	4f 91       	pop	r20
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	0f 90       	pop	r0
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	0f 90       	pop	r0
     7f6:	1f 90       	pop	r1
     7f8:	18 95       	reti

000007fa <get_abs_time_ms>:
/* MAIN section */

void halt(void)
{
	/* MAIN Loop Shutdown */
	runmode = 0;
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	1f 92       	push	r1
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	8f b7       	in	r24, 0x3f	; 63
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	f8 94       	cli
     80a:	e9 81       	ldd	r30, Y+1	; 0x01
     80c:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <g_timer_abs_msb>
     810:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <g_timer_abs_msb+0x1>
     814:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <g_timer_abs_msb+0x2>
     818:	50 91 24 01 	lds	r21, 0x0124	; 0x800124 <g_timer_abs_msb+0x3>
     81c:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <g_timer_abs_msb+0x4>
     820:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <g_timer_abs_msb+0x5>
     824:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <g_timer_abs_msb+0x6>
     828:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <g_timer_abs_msb+0x7>
     82c:	ef bf       	out	0x3f, r30	; 63
     82e:	0f 90       	pop	r0
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <eeprom_nvm_settings_write>:
     836:	88 23       	and	r24, r24
     838:	24 f4       	brge	.+8      	; 0x842 <eeprom_nvm_settings_write+0xc>
     83a:	61 e1       	ldi	r22, 0x11	; 17
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	06 c5       	rjmp	.+2572   	; 0x124e <eeprom_write_byte>
     842:	08 95       	ret

00000844 <eeprom_nvm_settings_read>:
     844:	88 23       	and	r24, r24
     846:	3c f4       	brge	.+14     	; 0x856 <eeprom_nvm_settings_read+0x12>
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	f8 d4       	rcall	.+2544   	; 0x123e <eeprom_read_byte>
     84e:	81 31       	cpi	r24, 0x11	; 17
     850:	11 f0       	breq	.+4      	; 0x856 <eeprom_nvm_settings_read+0x12>
     852:	80 e8       	ldi	r24, 0x80	; 128
     854:	f0 cf       	rjmp	.-32     	; 0x836 <eeprom_nvm_settings_write>
     856:	08 95       	ret

00000858 <task>:
     858:	3f 92       	push	r3
     85a:	4f 92       	push	r4
     85c:	5f 92       	push	r5
     85e:	6f 92       	push	r6
     860:	7f 92       	push	r7
     862:	8f 92       	push	r8
     864:	9f 92       	push	r9
     866:	af 92       	push	r10
     868:	bf 92       	push	r11
     86a:	cf 92       	push	r12
     86c:	df 92       	push	r13
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	29 97       	sbiw	r28, 0x09	; 9
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	de bf       	out	0x3e, r29	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	cd bf       	out	0x3d, r28	; 61
     88a:	32 2e       	mov	r3, r18
     88c:	43 2e       	mov	r4, r19
     88e:	54 2e       	mov	r5, r20
     890:	65 2e       	mov	r6, r21
     892:	76 2e       	mov	r7, r22
     894:	87 2e       	mov	r8, r23
     896:	98 2e       	mov	r9, r24
     898:	b9 2f       	mov	r27, r25
     89a:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <s_timer_task_next.2914>
     89e:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <s_timer_task_next.2914+0x1>
     8a2:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <s_timer_task_next.2914+0x2>
     8a6:	50 91 1a 01 	lds	r21, 0x011A	; 0x80011a <s_timer_task_next.2914+0x3>
     8aa:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <s_timer_task_next.2914+0x4>
     8ae:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <s_timer_task_next.2914+0x5>
     8b2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <s_timer_task_next.2914+0x6>
     8b6:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <s_timer_task_next.2914+0x7>
     8ba:	a3 2c       	mov	r10, r3
     8bc:	b4 2c       	mov	r11, r4
     8be:	c5 2c       	mov	r12, r5
     8c0:	d6 2c       	mov	r13, r6
     8c2:	e7 2c       	mov	r14, r7
     8c4:	f8 2c       	mov	r15, r8
     8c6:	09 2d       	mov	r16, r9
     8c8:	1b 2f       	mov	r17, r27
     8ca:	a4 d4       	rcall	.+2376   	; 0x1214 <__cmpdi2>
     8cc:	11 f0       	breq	.+4      	; 0x8d2 <task+0x7a>
     8ce:	08 f0       	brcs	.+2      	; 0x8d2 <task+0x7a>
     8d0:	e4 c3       	rjmp	.+1992   	; 0x109a <__stack+0x79b>
     8d2:	23 2d       	mov	r18, r3
     8d4:	34 2d       	mov	r19, r4
     8d6:	45 2d       	mov	r20, r5
     8d8:	56 2d       	mov	r21, r6
     8da:	67 2d       	mov	r22, r7
     8dc:	78 2d       	mov	r23, r8
     8de:	89 2d       	mov	r24, r9
     8e0:	9b 2f       	mov	r25, r27
     8e2:	a9 e1       	ldi	r26, 0x19	; 25
     8e4:	8b d4       	rcall	.+2326   	; 0x11fc <__adddi3_s8>
     8e6:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <s_timer_task_next.2914>
     8ea:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <s_timer_task_next.2914+0x1>
     8ee:	40 93 19 01 	sts	0x0119, r20	; 0x800119 <s_timer_task_next.2914+0x2>
     8f2:	50 93 1a 01 	sts	0x011A, r21	; 0x80011a <s_timer_task_next.2914+0x3>
     8f6:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <s_timer_task_next.2914+0x4>
     8fa:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <s_timer_task_next.2914+0x5>
     8fe:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <s_timer_task_next.2914+0x6>
     902:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <s_timer_task_next.2914+0x7>
     906:	8f b7       	in	r24, 0x3f	; 63
     908:	89 87       	std	Y+9, r24	; 0x09
     90a:	f8 94       	cli
     90c:	89 85       	ldd	r24, Y+9	; 0x09
     90e:	93 b1       	in	r25, 0x03	; 3
     910:	99 83       	std	Y+1, r25	; 0x01
     912:	99 b1       	in	r25, 0x09	; 9
     914:	9a 83       	std	Y+2, r25	; 0x02
     916:	8f bf       	out	0x3f, r24	; 63
     918:	9a 81       	ldd	r25, Y+2	; 0x02
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	92 95       	swap	r25
     91e:	91 70       	andi	r25, 0x01	; 1
     920:	98 27       	eor	r25, r24
     922:	9b 83       	std	Y+3, r25	; 0x03
     924:	9a 81       	ldd	r25, Y+2	; 0x02
     926:	96 fb       	bst	r25, 6
     928:	99 27       	eor	r25, r25
     92a:	90 f9       	bld	r25, 0
     92c:	98 27       	eor	r25, r24
     92e:	9c 83       	std	Y+4, r25	; 0x04
     930:	9a 81       	ldd	r25, Y+2	; 0x02
     932:	90 95       	com	r25
     934:	99 1f       	adc	r25, r25
     936:	99 27       	eor	r25, r25
     938:	99 1f       	adc	r25, r25
     93a:	9d 83       	std	Y+5, r25	; 0x05
     93c:	99 81       	ldd	r25, Y+1	; 0x01
     93e:	96 fb       	bst	r25, 6
     940:	99 27       	eor	r25, r25
     942:	90 f9       	bld	r25, 0
     944:	89 27       	eor	r24, r25
     946:	8e 83       	std	Y+6, r24	; 0x06
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	80 95       	com	r24
     94c:	88 1f       	adc	r24, r24
     94e:	88 27       	eor	r24, r24
     950:	88 1f       	adc	r24, r24
     952:	8f 83       	std	Y+7, r24	; 0x07
     954:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <s_fsm_state.2917>
     958:	4e 2f       	mov	r20, r30
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	44 32       	cpi	r20, 0x24	; 36
     95e:	51 05       	cpc	r21, r1
     960:	08 f0       	brcs	.+2      	; 0x964 <__stack+0x65>
     962:	5f c3       	rjmp	.+1726   	; 0x1022 <__stack+0x723>
     964:	fa 01       	movw	r30, r20
     966:	ec 5c       	subi	r30, 0xCC	; 204
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	42 c4       	rjmp	.+2180   	; 0x11f0 <__tablejump2__>
     96c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <s_o_kl.2919>
     970:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <s_o_pv_g.2920>
     974:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <s_o_pv_o.2921>
     978:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <s_o_m1.2922>
     97c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <s_o_m2.2923>
     980:	8b 81       	ldd	r24, Y+3	; 0x03
     982:	81 11       	cpse	r24, r1
     984:	87 c3       	rjmp	.+1806   	; 0x1094 <__stack+0x795>
     986:	8c 81       	ldd	r24, Y+4	; 0x04
     988:	88 23       	and	r24, r24
     98a:	09 f4       	brne	.+2      	; 0x98e <__stack+0x8f>
     98c:	83 c3       	rjmp	.+1798   	; 0x1094 <__stack+0x795>
     98e:	8d 81       	ldd	r24, Y+5	; 0x05
     990:	81 11       	cpse	r24, r1
     992:	80 c3       	rjmp	.+1792   	; 0x1094 <__stack+0x795>
     994:	8e 81       	ldd	r24, Y+6	; 0x06
     996:	88 23       	and	r24, r24
     998:	09 f4       	brne	.+2      	; 0x99c <__stack+0x9d>
     99a:	7c c3       	rjmp	.+1784   	; 0x1094 <__stack+0x795>
     99c:	8f 81       	ldd	r24, Y+7	; 0x07
     99e:	81 11       	cpse	r24, r1
     9a0:	79 c3       	rjmp	.+1778   	; 0x1094 <__stack+0x795>
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <s_fsm_state.2917>
     9a8:	75 c3       	rjmp	.+1770   	; 0x1094 <__stack+0x795>
     9aa:	8b 81       	ldd	r24, Y+3	; 0x03
     9ac:	88 23       	and	r24, r24
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <__stack+0xb3>
     9b0:	83 c0       	rjmp	.+262    	; 0xab8 <__stack+0x1b9>
     9b2:	8c 81       	ldd	r24, Y+4	; 0x04
     9b4:	88 23       	and	r24, r24
     9b6:	09 f4       	brne	.+2      	; 0x9ba <__stack+0xbb>
     9b8:	7f c0       	rjmp	.+254    	; 0xab8 <__stack+0x1b9>
     9ba:	8d 81       	ldd	r24, Y+5	; 0x05
     9bc:	81 11       	cpse	r24, r1
     9be:	7c c0       	rjmp	.+248    	; 0xab8 <__stack+0x1b9>
     9c0:	8e 81       	ldd	r24, Y+6	; 0x06
     9c2:	88 23       	and	r24, r24
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <__stack+0xc9>
     9c6:	78 c0       	rjmp	.+240    	; 0xab8 <__stack+0x1b9>
     9c8:	8f 81       	ldd	r24, Y+7	; 0x07
     9ca:	81 11       	cpse	r24, r1
     9cc:	75 c0       	rjmp	.+234    	; 0xab8 <__stack+0x1b9>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <s_o_kl.2919>
     9d4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <s_i_fb_t1.2918>
     9d8:	81 11       	cpse	r24, r1
     9da:	20 c0       	rjmp	.+64     	; 0xa1c <__stack+0x11d>
     9dc:	23 2d       	mov	r18, r3
     9de:	34 2d       	mov	r19, r4
     9e0:	45 2d       	mov	r20, r5
     9e2:	56 2d       	mov	r21, r6
     9e4:	67 2d       	mov	r22, r7
     9e6:	78 2d       	mov	r23, r8
     9e8:	89 2d       	mov	r24, r9
     9ea:	9b 2f       	mov	r25, r27
     9ec:	2c 50       	subi	r18, 0x0C	; 12
     9ee:	3e 4f       	sbci	r19, 0xFE	; 254
     9f0:	4f 4f       	sbci	r20, 0xFF	; 255
     9f2:	5f 4f       	sbci	r21, 0xFF	; 255
     9f4:	6f 4f       	sbci	r22, 0xFF	; 255
     9f6:	7f 4f       	sbci	r23, 0xFF	; 255
     9f8:	8f 4f       	sbci	r24, 0xFF	; 255
     9fa:	9f 4f       	sbci	r25, 0xFF	; 255
     9fc:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <s_timer_fb.2915>
     a00:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <s_timer_fb.2915+0x1>
     a04:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <s_timer_fb.2915+0x2>
     a08:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <s_timer_fb.2915+0x3>
     a0c:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <s_timer_fb.2915+0x4>
     a10:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <s_timer_fb.2915+0x5>
     a14:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <s_timer_fb.2915+0x6>
     a18:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <s_timer_fb.2915+0x7>
     a1c:	a0 90 08 01 	lds	r10, 0x0108	; 0x800108 <s_timer_fb.2915>
     a20:	b0 90 09 01 	lds	r11, 0x0109	; 0x800109 <s_timer_fb.2915+0x1>
     a24:	c0 90 0a 01 	lds	r12, 0x010A	; 0x80010a <s_timer_fb.2915+0x2>
     a28:	d0 90 0b 01 	lds	r13, 0x010B	; 0x80010b <s_timer_fb.2915+0x3>
     a2c:	e0 90 0c 01 	lds	r14, 0x010C	; 0x80010c <s_timer_fb.2915+0x4>
     a30:	f0 90 0d 01 	lds	r15, 0x010D	; 0x80010d <s_timer_fb.2915+0x5>
     a34:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <s_timer_fb.2915+0x6>
     a38:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <s_timer_fb.2915+0x7>
     a3c:	2a 2d       	mov	r18, r10
     a3e:	3b 2d       	mov	r19, r11
     a40:	4c 2d       	mov	r20, r12
     a42:	5d 2d       	mov	r21, r13
     a44:	6e 2d       	mov	r22, r14
     a46:	7f 2d       	mov	r23, r15
     a48:	80 2f       	mov	r24, r16
     a4a:	91 2f       	mov	r25, r17
     a4c:	a0 e0       	ldi	r26, 0x00	; 0
     a4e:	eb d3       	rcall	.+2006   	; 0x1226 <__cmpdi2_s8>
     a50:	09 f4       	brne	.+2      	; 0xa54 <__stack+0x155>
     a52:	e9 c2       	rjmp	.+1490   	; 0x1026 <__stack+0x727>
     a54:	23 2d       	mov	r18, r3
     a56:	34 2d       	mov	r19, r4
     a58:	45 2d       	mov	r20, r5
     a5a:	56 2d       	mov	r21, r6
     a5c:	67 2d       	mov	r22, r7
     a5e:	78 2d       	mov	r23, r8
     a60:	89 2d       	mov	r24, r9
     a62:	9b 2f       	mov	r25, r27
     a64:	d7 d3       	rcall	.+1966   	; 0x1214 <__cmpdi2>
     a66:	08 f4       	brcc	.+2      	; 0xa6a <__stack+0x16b>
     a68:	de c2       	rjmp	.+1468   	; 0x1026 <__stack+0x727>
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <s_o_pv_o.2921>
     a70:	89 2d       	mov	r24, r9
     a72:	28 51       	subi	r18, 0x18	; 24
     a74:	3c 4f       	sbci	r19, 0xFC	; 252
     a76:	4f 4f       	sbci	r20, 0xFF	; 255
     a78:	5f 4f       	sbci	r21, 0xFF	; 255
     a7a:	6f 4f       	sbci	r22, 0xFF	; 255
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	8f 4f       	sbci	r24, 0xFF	; 255
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_end>
     a86:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_end+0x1>
     a8a:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__data_end+0x2>
     a8e:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__data_end+0x3>
     a92:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end+0x4>
     a96:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x5>
     a9a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x6>
     a9e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x7>
     aa2:	80 e1       	ldi	r24, 0x10	; 16
     aa4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <s_fsm_state.2917>
     aa8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <s_o_pv_g.2920>
     aac:	88 23       	and	r24, r24
     aae:	09 f4       	brne	.+2      	; 0xab2 <__stack+0x1b3>
     ab0:	c6 c2       	rjmp	.+1420   	; 0x103e <__stack+0x73f>
     ab2:	83 ee       	ldi	r24, 0xE3	; 227
     ab4:	90 e1       	ldi	r25, 0x10	; 16
     ab6:	c7 c2       	rjmp	.+1422   	; 0x1046 <__stack+0x747>
     ab8:	8b 81       	ldd	r24, Y+3	; 0x03
     aba:	81 11       	cpse	r24, r1
     abc:	10 c0       	rjmp	.+32     	; 0xade <__stack+0x1df>
     abe:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <s_timer_fb.2915>
     ac2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <s_timer_fb.2915+0x1>
     ac6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <s_timer_fb.2915+0x2>
     aca:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <s_timer_fb.2915+0x3>
     ace:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <s_timer_fb.2915+0x4>
     ad2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <s_timer_fb.2915+0x5>
     ad6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <s_timer_fb.2915+0x6>
     ada:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <s_timer_fb.2915+0x7>
     ade:	8c 81       	ldd	r24, Y+4	; 0x04
     ae0:	88 23       	and	r24, r24
     ae2:	51 f0       	breq	.+20     	; 0xaf8 <__stack+0x1f9>
     ae4:	8d 81       	ldd	r24, Y+5	; 0x05
     ae6:	81 11       	cpse	r24, r1
     ae8:	07 c0       	rjmp	.+14     	; 0xaf8 <__stack+0x1f9>
     aea:	8e 81       	ldd	r24, Y+6	; 0x06
     aec:	88 23       	and	r24, r24
     aee:	21 f0       	breq	.+8      	; 0xaf8 <__stack+0x1f9>
     af0:	8f 81       	ldd	r24, Y+7	; 0x07
     af2:	88 23       	and	r24, r24
     af4:	09 f4       	brne	.+2      	; 0xaf8 <__stack+0x1f9>
     af6:	97 c2       	rjmp	.+1326   	; 0x1026 <__stack+0x727>
     af8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <s_fsm_state.2917>
     afc:	94 c2       	rjmp	.+1320   	; 0x1026 <__stack+0x727>
     afe:	a0 90 00 01 	lds	r10, 0x0100	; 0x800100 <__data_end>
     b02:	b0 90 01 01 	lds	r11, 0x0101	; 0x800101 <__data_end+0x1>
     b06:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <__data_end+0x2>
     b0a:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <__data_end+0x3>
     b0e:	e0 90 04 01 	lds	r14, 0x0104	; 0x800104 <__data_end+0x4>
     b12:	f0 90 05 01 	lds	r15, 0x0105	; 0x800105 <__data_end+0x5>
     b16:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <__data_end+0x6>
     b1a:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <__data_end+0x7>
     b1e:	2a 2d       	mov	r18, r10
     b20:	3b 2d       	mov	r19, r11
     b22:	4c 2d       	mov	r20, r12
     b24:	5d 2d       	mov	r21, r13
     b26:	6e 2d       	mov	r22, r14
     b28:	7f 2d       	mov	r23, r15
     b2a:	80 2f       	mov	r24, r16
     b2c:	91 2f       	mov	r25, r17
     b2e:	a0 e0       	ldi	r26, 0x00	; 0
     b30:	7a d3       	rcall	.+1780   	; 0x1226 <__cmpdi2_s8>
     b32:	61 f0       	breq	.+24     	; 0xb4c <__stack+0x24d>
     b34:	23 2d       	mov	r18, r3
     b36:	34 2d       	mov	r19, r4
     b38:	45 2d       	mov	r20, r5
     b3a:	56 2d       	mov	r21, r6
     b3c:	67 2d       	mov	r22, r7
     b3e:	78 2d       	mov	r23, r8
     b40:	89 2d       	mov	r24, r9
     b42:	9b 2f       	mov	r25, r27
     b44:	67 d3       	rcall	.+1742   	; 0x1214 <__cmpdi2>
     b46:	10 f0       	brcs	.+4      	; 0xb4c <__stack+0x24d>
     b48:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <s_o_pv_o.2921>
     b4c:	8f 81       	ldd	r24, Y+7	; 0x07
     b4e:	88 23       	and	r24, r24
     b50:	09 f4       	brne	.+2      	; 0xb54 <__stack+0x255>
     b52:	3c c0       	rjmp	.+120    	; 0xbcc <__stack+0x2cd>
     b54:	8e 81       	ldd	r24, Y+6	; 0x06
     b56:	81 11       	cpse	r24, r1
     b58:	39 c0       	rjmp	.+114    	; 0xbcc <__stack+0x2cd>
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	88 23       	and	r24, r24
     b5e:	b1 f1       	breq	.+108    	; 0xbcc <__stack+0x2cd>
     b60:	a0 90 08 01 	lds	r10, 0x0108	; 0x800108 <s_timer_fb.2915>
     b64:	b0 90 09 01 	lds	r11, 0x0109	; 0x800109 <s_timer_fb.2915+0x1>
     b68:	c0 90 0a 01 	lds	r12, 0x010A	; 0x80010a <s_timer_fb.2915+0x2>
     b6c:	d0 90 0b 01 	lds	r13, 0x010B	; 0x80010b <s_timer_fb.2915+0x3>
     b70:	e0 90 0c 01 	lds	r14, 0x010C	; 0x80010c <s_timer_fb.2915+0x4>
     b74:	f0 90 0d 01 	lds	r15, 0x010D	; 0x80010d <s_timer_fb.2915+0x5>
     b78:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <s_timer_fb.2915+0x6>
     b7c:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <s_timer_fb.2915+0x7>
     b80:	2a 2d       	mov	r18, r10
     b82:	3b 2d       	mov	r19, r11
     b84:	4c 2d       	mov	r20, r12
     b86:	5d 2d       	mov	r21, r13
     b88:	6e 2d       	mov	r22, r14
     b8a:	7f 2d       	mov	r23, r15
     b8c:	80 2f       	mov	r24, r16
     b8e:	91 2f       	mov	r25, r17
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	49 d3       	rcall	.+1682   	; 0x1226 <__cmpdi2_s8>
     b94:	d9 f0       	breq	.+54     	; 0xbcc <__stack+0x2cd>
     b96:	23 2d       	mov	r18, r3
     b98:	34 2d       	mov	r19, r4
     b9a:	45 2d       	mov	r20, r5
     b9c:	56 2d       	mov	r21, r6
     b9e:	67 2d       	mov	r22, r7
     ba0:	78 2d       	mov	r23, r8
     ba2:	89 2d       	mov	r24, r9
     ba4:	9b 2f       	mov	r25, r27
     ba6:	36 d3       	rcall	.+1644   	; 0x1214 <__cmpdi2>
     ba8:	88 f0       	brcs	.+34     	; 0xbcc <__stack+0x2cd>
     baa:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <s_o_pv_o.2921>
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <s_o_m1.2922>
     bb4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <s_o_m2.2923>
     bb8:	81 e1       	ldi	r24, 0x11	; 17
     bba:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <s_fsm_state.2917>
     bbe:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <s_o_pv_g.2920>
     bc2:	81 11       	cpse	r24, r1
     bc4:	46 c2       	rjmp	.+1164   	; 0x1052 <__stack+0x753>
     bc6:	83 ec       	ldi	r24, 0xC3	; 195
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	3d c2       	rjmp	.+1146   	; 0x1046 <__stack+0x747>
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	81 11       	cpse	r24, r1
     bd0:	11 c0       	rjmp	.+34     	; 0xbf4 <__stack+0x2f5>
     bd2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <s_timer_fb.2915>
     bd6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <s_timer_fb.2915+0x1>
     bda:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <s_timer_fb.2915+0x2>
     bde:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <s_timer_fb.2915+0x3>
     be2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <s_timer_fb.2915+0x4>
     be6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <s_timer_fb.2915+0x5>
     bea:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <s_timer_fb.2915+0x6>
     bee:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <s_timer_fb.2915+0x7>
     bf2:	19 c2       	rjmp	.+1074   	; 0x1026 <__stack+0x727>
     bf4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <s_i_fb_t1.2918>
     bf8:	81 11       	cpse	r24, r1
     bfa:	15 c2       	rjmp	.+1066   	; 0x1026 <__stack+0x727>
     bfc:	23 2d       	mov	r18, r3
     bfe:	34 2d       	mov	r19, r4
     c00:	45 2d       	mov	r20, r5
     c02:	56 2d       	mov	r21, r6
     c04:	67 2d       	mov	r22, r7
     c06:	78 2d       	mov	r23, r8
     c08:	89 2d       	mov	r24, r9
     c0a:	9b 2f       	mov	r25, r27
     c0c:	2c 50       	subi	r18, 0x0C	; 12
     c0e:	3e 4f       	sbci	r19, 0xFE	; 254
     c10:	4f 4f       	sbci	r20, 0xFF	; 255
     c12:	5f 4f       	sbci	r21, 0xFF	; 255
     c14:	6f 4f       	sbci	r22, 0xFF	; 255
     c16:	7f 4f       	sbci	r23, 0xFF	; 255
     c18:	8f 4f       	sbci	r24, 0xFF	; 255
     c1a:	9f 4f       	sbci	r25, 0xFF	; 255
     c1c:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <s_timer_fb.2915>
     c20:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <s_timer_fb.2915+0x1>
     c24:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <s_timer_fb.2915+0x2>
     c28:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <s_timer_fb.2915+0x3>
     c2c:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <s_timer_fb.2915+0x4>
     c30:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <s_timer_fb.2915+0x5>
     c34:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <s_timer_fb.2915+0x6>
     c38:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <s_timer_fb.2915+0x7>
     c3c:	f4 c1       	rjmp	.+1000   	; 0x1026 <__stack+0x727>
     c3e:	a0 90 00 01 	lds	r10, 0x0100	; 0x800100 <__data_end>
     c42:	b0 90 01 01 	lds	r11, 0x0101	; 0x800101 <__data_end+0x1>
     c46:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <__data_end+0x2>
     c4a:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <__data_end+0x3>
     c4e:	e0 90 04 01 	lds	r14, 0x0104	; 0x800104 <__data_end+0x4>
     c52:	f0 90 05 01 	lds	r15, 0x0105	; 0x800105 <__data_end+0x5>
     c56:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <__data_end+0x6>
     c5a:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <__data_end+0x7>
     c5e:	2a 2d       	mov	r18, r10
     c60:	3b 2d       	mov	r19, r11
     c62:	4c 2d       	mov	r20, r12
     c64:	5d 2d       	mov	r21, r13
     c66:	6e 2d       	mov	r22, r14
     c68:	7f 2d       	mov	r23, r15
     c6a:	80 2f       	mov	r24, r16
     c6c:	91 2f       	mov	r25, r17
     c6e:	a0 e0       	ldi	r26, 0x00	; 0
     c70:	da d2       	rcall	.+1460   	; 0x1226 <__cmpdi2_s8>
     c72:	61 f0       	breq	.+24     	; 0xc8c <__stack+0x38d>
     c74:	23 2d       	mov	r18, r3
     c76:	34 2d       	mov	r19, r4
     c78:	45 2d       	mov	r20, r5
     c7a:	56 2d       	mov	r21, r6
     c7c:	67 2d       	mov	r22, r7
     c7e:	78 2d       	mov	r23, r8
     c80:	89 2d       	mov	r24, r9
     c82:	9b 2f       	mov	r25, r27
     c84:	c7 d2       	rcall	.+1422   	; 0x1214 <__cmpdi2>
     c86:	10 f0       	brcs	.+4      	; 0xc8c <__stack+0x38d>
     c88:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <s_o_pv_o.2921>
     c8c:	8d 81       	ldd	r24, Y+5	; 0x05
     c8e:	88 23       	and	r24, r24
     c90:	41 f0       	breq	.+16     	; 0xca2 <__stack+0x3a3>
     c92:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <s_o_m1.2922>
     c96:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <s_o_m2.2923>
     c9a:	83 e1       	ldi	r24, 0x13	; 19
     c9c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <s_fsm_state.2917>
     ca0:	c2 c1       	rjmp	.+900    	; 0x1026 <__stack+0x727>
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
     ca4:	81 11       	cpse	r24, r1
     ca6:	16 c0       	rjmp	.+44     	; 0xcd4 <__stack+0x3d5>
     ca8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <s_timer_fb.2915>
     cac:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <s_timer_fb.2915+0x1>
     cb0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <s_timer_fb.2915+0x2>
     cb4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <s_timer_fb.2915+0x3>
     cb8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <s_timer_fb.2915+0x4>
     cbc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <s_timer_fb.2915+0x5>
     cc0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <s_timer_fb.2915+0x6>
     cc4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <s_timer_fb.2915+0x7>
     cc8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <s_o_m1.2922>
     ccc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <s_o_m2.2923>
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	a9 c1       	rjmp	.+850    	; 0x1026 <__stack+0x727>
     cd4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <s_i_fb_t1.2918>
     cd8:	81 11       	cpse	r24, r1
     cda:	20 c0       	rjmp	.+64     	; 0xd1c <__stack+0x41d>
     cdc:	23 2d       	mov	r18, r3
     cde:	34 2d       	mov	r19, r4
     ce0:	45 2d       	mov	r20, r5
     ce2:	56 2d       	mov	r21, r6
     ce4:	67 2d       	mov	r22, r7
     ce6:	78 2d       	mov	r23, r8
     ce8:	89 2d       	mov	r24, r9
     cea:	9b 2f       	mov	r25, r27
     cec:	2c 50       	subi	r18, 0x0C	; 12
     cee:	3e 4f       	sbci	r19, 0xFE	; 254
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	6f 4f       	sbci	r22, 0xFF	; 255
     cf6:	7f 4f       	sbci	r23, 0xFF	; 255
     cf8:	8f 4f       	sbci	r24, 0xFF	; 255
     cfa:	9f 4f       	sbci	r25, 0xFF	; 255
     cfc:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <s_timer_fb.2915>
     d00:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <s_timer_fb.2915+0x1>
     d04:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <s_timer_fb.2915+0x2>
     d08:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <s_timer_fb.2915+0x3>
     d0c:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <s_timer_fb.2915+0x4>
     d10:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <s_timer_fb.2915+0x5>
     d14:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <s_timer_fb.2915+0x6>
     d18:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <s_timer_fb.2915+0x7>
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	88 23       	and	r24, r24
     d20:	09 f4       	brne	.+2      	; 0xd24 <__stack+0x425>
     d22:	81 c1       	rjmp	.+770    	; 0x1026 <__stack+0x727>
     d24:	a0 90 08 01 	lds	r10, 0x0108	; 0x800108 <s_timer_fb.2915>
     d28:	b0 90 09 01 	lds	r11, 0x0109	; 0x800109 <s_timer_fb.2915+0x1>
     d2c:	c0 90 0a 01 	lds	r12, 0x010A	; 0x80010a <s_timer_fb.2915+0x2>
     d30:	d0 90 0b 01 	lds	r13, 0x010B	; 0x80010b <s_timer_fb.2915+0x3>
     d34:	e0 90 0c 01 	lds	r14, 0x010C	; 0x80010c <s_timer_fb.2915+0x4>
     d38:	f0 90 0d 01 	lds	r15, 0x010D	; 0x80010d <s_timer_fb.2915+0x5>
     d3c:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <s_timer_fb.2915+0x6>
     d40:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <s_timer_fb.2915+0x7>
     d44:	2a 2d       	mov	r18, r10
     d46:	3b 2d       	mov	r19, r11
     d48:	4c 2d       	mov	r20, r12
     d4a:	5d 2d       	mov	r21, r13
     d4c:	6e 2d       	mov	r22, r14
     d4e:	7f 2d       	mov	r23, r15
     d50:	80 2f       	mov	r24, r16
     d52:	91 2f       	mov	r25, r17
     d54:	a0 e0       	ldi	r26, 0x00	; 0
     d56:	67 d2       	rcall	.+1230   	; 0x1226 <__cmpdi2_s8>
     d58:	09 f4       	brne	.+2      	; 0xd5c <__stack+0x45d>
     d5a:	65 c1       	rjmp	.+714    	; 0x1026 <__stack+0x727>
     d5c:	23 2d       	mov	r18, r3
     d5e:	34 2d       	mov	r19, r4
     d60:	45 2d       	mov	r20, r5
     d62:	56 2d       	mov	r21, r6
     d64:	67 2d       	mov	r22, r7
     d66:	78 2d       	mov	r23, r8
     d68:	89 2d       	mov	r24, r9
     d6a:	9b 2f       	mov	r25, r27
     d6c:	53 d2       	rcall	.+1190   	; 0x1214 <__cmpdi2>
     d6e:	08 f4       	brcc	.+2      	; 0xd72 <__stack+0x473>
     d70:	5a c1       	rjmp	.+692    	; 0x1026 <__stack+0x727>
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <s_o_m1.2922>
     d78:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <s_o_m2.2923>
     d7c:	54 c1       	rjmp	.+680    	; 0x1026 <__stack+0x727>
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	81 11       	cpse	r24, r1
     d82:	51 c1       	rjmp	.+674    	; 0x1026 <__stack+0x727>
     d84:	80 e2       	ldi	r24, 0x20	; 32
     d86:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <s_fsm_state.2917>
     d8a:	4d c1       	rjmp	.+666    	; 0x1026 <__stack+0x727>
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	88 23       	and	r24, r24
     d90:	09 f4       	brne	.+2      	; 0xd94 <__stack+0x495>
     d92:	60 c0       	rjmp	.+192    	; 0xe54 <__stack+0x555>
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	81 11       	cpse	r24, r1
     d98:	5d c0       	rjmp	.+186    	; 0xe54 <__stack+0x555>
     d9a:	8d 81       	ldd	r24, Y+5	; 0x05
     d9c:	88 23       	and	r24, r24
     d9e:	09 f4       	brne	.+2      	; 0xda2 <__stack+0x4a3>
     da0:	59 c0       	rjmp	.+178    	; 0xe54 <__stack+0x555>
     da2:	8e 81       	ldd	r24, Y+6	; 0x06
     da4:	81 11       	cpse	r24, r1
     da6:	56 c0       	rjmp	.+172    	; 0xe54 <__stack+0x555>
     da8:	8f 81       	ldd	r24, Y+7	; 0x07
     daa:	88 23       	and	r24, r24
     dac:	09 f4       	brne	.+2      	; 0xdb0 <__stack+0x4b1>
     dae:	52 c0       	rjmp	.+164    	; 0xe54 <__stack+0x555>
     db0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <s_i_fb_t1.2918>
     db4:	81 11       	cpse	r24, r1
     db6:	20 c0       	rjmp	.+64     	; 0xdf8 <__stack+0x4f9>
     db8:	23 2d       	mov	r18, r3
     dba:	34 2d       	mov	r19, r4
     dbc:	45 2d       	mov	r20, r5
     dbe:	56 2d       	mov	r21, r6
     dc0:	67 2d       	mov	r22, r7
     dc2:	78 2d       	mov	r23, r8
     dc4:	89 2d       	mov	r24, r9
     dc6:	9b 2f       	mov	r25, r27
     dc8:	2c 50       	subi	r18, 0x0C	; 12
     dca:	3e 4f       	sbci	r19, 0xFE	; 254
     dcc:	4f 4f       	sbci	r20, 0xFF	; 255
     dce:	5f 4f       	sbci	r21, 0xFF	; 255
     dd0:	6f 4f       	sbci	r22, 0xFF	; 255
     dd2:	7f 4f       	sbci	r23, 0xFF	; 255
     dd4:	8f 4f       	sbci	r24, 0xFF	; 255
     dd6:	9f 4f       	sbci	r25, 0xFF	; 255
     dd8:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <s_timer_fb.2915>
     ddc:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <s_timer_fb.2915+0x1>
     de0:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <s_timer_fb.2915+0x2>
     de4:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <s_timer_fb.2915+0x3>
     de8:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <s_timer_fb.2915+0x4>
     dec:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <s_timer_fb.2915+0x5>
     df0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <s_timer_fb.2915+0x6>
     df4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <s_timer_fb.2915+0x7>
     df8:	a0 90 08 01 	lds	r10, 0x0108	; 0x800108 <s_timer_fb.2915>
     dfc:	b0 90 09 01 	lds	r11, 0x0109	; 0x800109 <s_timer_fb.2915+0x1>
     e00:	c0 90 0a 01 	lds	r12, 0x010A	; 0x80010a <s_timer_fb.2915+0x2>
     e04:	d0 90 0b 01 	lds	r13, 0x010B	; 0x80010b <s_timer_fb.2915+0x3>
     e08:	e0 90 0c 01 	lds	r14, 0x010C	; 0x80010c <s_timer_fb.2915+0x4>
     e0c:	f0 90 0d 01 	lds	r15, 0x010D	; 0x80010d <s_timer_fb.2915+0x5>
     e10:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <s_timer_fb.2915+0x6>
     e14:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <s_timer_fb.2915+0x7>
     e18:	2a 2d       	mov	r18, r10
     e1a:	3b 2d       	mov	r19, r11
     e1c:	4c 2d       	mov	r20, r12
     e1e:	5d 2d       	mov	r21, r13
     e20:	6e 2d       	mov	r22, r14
     e22:	7f 2d       	mov	r23, r15
     e24:	80 2f       	mov	r24, r16
     e26:	91 2f       	mov	r25, r17
     e28:	a0 e0       	ldi	r26, 0x00	; 0
     e2a:	fd d1       	rcall	.+1018   	; 0x1226 <__cmpdi2_s8>
     e2c:	31 f1       	breq	.+76     	; 0xe7a <__stack+0x57b>
     e2e:	23 2d       	mov	r18, r3
     e30:	34 2d       	mov	r19, r4
     e32:	45 2d       	mov	r20, r5
     e34:	56 2d       	mov	r21, r6
     e36:	67 2d       	mov	r22, r7
     e38:	78 2d       	mov	r23, r8
     e3a:	89 2d       	mov	r24, r9
     e3c:	9b 2f       	mov	r25, r27
     e3e:	ea d1       	rcall	.+980    	; 0x1214 <__cmpdi2>
     e40:	e0 f0       	brcs	.+56     	; 0xe7a <__stack+0x57b>
     e42:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <s_o_m1.2922>
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <s_o_m2.2923>
     e4c:	81 e2       	ldi	r24, 0x21	; 33
     e4e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <s_fsm_state.2917>
     e52:	13 c0       	rjmp	.+38     	; 0xe7a <__stack+0x57b>
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	81 11       	cpse	r24, r1
     e58:	10 c0       	rjmp	.+32     	; 0xe7a <__stack+0x57b>
     e5a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <s_timer_fb.2915>
     e5e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <s_timer_fb.2915+0x1>
     e62:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <s_timer_fb.2915+0x2>
     e66:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <s_timer_fb.2915+0x3>
     e6a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <s_timer_fb.2915+0x4>
     e6e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <s_timer_fb.2915+0x5>
     e72:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <s_timer_fb.2915+0x6>
     e76:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <s_timer_fb.2915+0x7>
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	88 23       	and	r24, r24
     e7e:	89 f1       	breq	.+98     	; 0xee2 <__stack+0x5e3>
     e80:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <s_o_m1.2922>
     e84:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <s_o_m2.2923>
     e88:	23 2d       	mov	r18, r3
     e8a:	34 2d       	mov	r19, r4
     e8c:	45 2d       	mov	r20, r5
     e8e:	56 2d       	mov	r21, r6
     e90:	67 2d       	mov	r22, r7
     e92:	78 2d       	mov	r23, r8
     e94:	89 2d       	mov	r24, r9
     e96:	9b 2f       	mov	r25, r27
     e98:	28 51       	subi	r18, 0x18	; 24
     e9a:	3c 4f       	sbci	r19, 0xFC	; 252
     e9c:	4f 4f       	sbci	r20, 0xFF	; 255
     e9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ea0:	6f 4f       	sbci	r22, 0xFF	; 255
     ea2:	7f 4f       	sbci	r23, 0xFF	; 255
     ea4:	8f 4f       	sbci	r24, 0xFF	; 255
     ea6:	9f 4f       	sbci	r25, 0xFF	; 255
     ea8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_end>
     eac:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_end+0x1>
     eb0:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__data_end+0x2>
     eb4:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__data_end+0x3>
     eb8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end+0x4>
     ebc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x5>
     ec0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x6>
     ec4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x7>
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <s_o_pv_g.2920>
     ece:	82 e2       	ldi	r24, 0x22	; 34
     ed0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <s_fsm_state.2917>
     ed4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <s_o_pv_o.2921>
     ed8:	81 11       	cpse	r24, r1
     eda:	be c0       	rjmp	.+380    	; 0x1058 <__stack+0x759>
     edc:	83 ee       	ldi	r24, 0xE3	; 227
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	b2 c0       	rjmp	.+356    	; 0x1046 <__stack+0x747>
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	81 11       	cpse	r24, r1
     ee6:	16 c0       	rjmp	.+44     	; 0xf14 <__stack+0x615>
     ee8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <s_o_m1.2922>
     eec:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <s_o_m2.2923>
     ef0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <s_timer_fb.2915>
     ef4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <s_timer_fb.2915+0x1>
     ef8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <s_timer_fb.2915+0x2>
     efc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <s_timer_fb.2915+0x3>
     f00:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <s_timer_fb.2915+0x4>
     f04:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <s_timer_fb.2915+0x5>
     f08:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <s_timer_fb.2915+0x6>
     f0c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <s_timer_fb.2915+0x7>
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	89 c0       	rjmp	.+274    	; 0x1026 <__stack+0x727>
     f14:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <s_i_fb_t1.2918>
     f18:	81 11       	cpse	r24, r1
     f1a:	20 c0       	rjmp	.+64     	; 0xf5c <__stack+0x65d>
     f1c:	23 2d       	mov	r18, r3
     f1e:	34 2d       	mov	r19, r4
     f20:	45 2d       	mov	r20, r5
     f22:	56 2d       	mov	r21, r6
     f24:	67 2d       	mov	r22, r7
     f26:	78 2d       	mov	r23, r8
     f28:	89 2d       	mov	r24, r9
     f2a:	9b 2f       	mov	r25, r27
     f2c:	2c 50       	subi	r18, 0x0C	; 12
     f2e:	3e 4f       	sbci	r19, 0xFE	; 254
     f30:	4f 4f       	sbci	r20, 0xFF	; 255
     f32:	5f 4f       	sbci	r21, 0xFF	; 255
     f34:	6f 4f       	sbci	r22, 0xFF	; 255
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	8f 4f       	sbci	r24, 0xFF	; 255
     f3a:	9f 4f       	sbci	r25, 0xFF	; 255
     f3c:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <s_timer_fb.2915>
     f40:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <s_timer_fb.2915+0x1>
     f44:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <s_timer_fb.2915+0x2>
     f48:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <s_timer_fb.2915+0x3>
     f4c:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <s_timer_fb.2915+0x4>
     f50:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <s_timer_fb.2915+0x5>
     f54:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <s_timer_fb.2915+0x6>
     f58:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <s_timer_fb.2915+0x7>
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	88 23       	and	r24, r24
     f60:	09 f4       	brne	.+2      	; 0xf64 <__stack+0x665>
     f62:	61 c0       	rjmp	.+194    	; 0x1026 <__stack+0x727>
     f64:	a0 90 08 01 	lds	r10, 0x0108	; 0x800108 <s_timer_fb.2915>
     f68:	b0 90 09 01 	lds	r11, 0x0109	; 0x800109 <s_timer_fb.2915+0x1>
     f6c:	c0 90 0a 01 	lds	r12, 0x010A	; 0x80010a <s_timer_fb.2915+0x2>
     f70:	d0 90 0b 01 	lds	r13, 0x010B	; 0x80010b <s_timer_fb.2915+0x3>
     f74:	e0 90 0c 01 	lds	r14, 0x010C	; 0x80010c <s_timer_fb.2915+0x4>
     f78:	f0 90 0d 01 	lds	r15, 0x010D	; 0x80010d <s_timer_fb.2915+0x5>
     f7c:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <s_timer_fb.2915+0x6>
     f80:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <s_timer_fb.2915+0x7>
     f84:	2a 2d       	mov	r18, r10
     f86:	3b 2d       	mov	r19, r11
     f88:	4c 2d       	mov	r20, r12
     f8a:	5d 2d       	mov	r21, r13
     f8c:	6e 2d       	mov	r22, r14
     f8e:	7f 2d       	mov	r23, r15
     f90:	80 2f       	mov	r24, r16
     f92:	91 2f       	mov	r25, r17
     f94:	a0 e0       	ldi	r26, 0x00	; 0
     f96:	47 d1       	rcall	.+654    	; 0x1226 <__cmpdi2_s8>
     f98:	09 f4       	brne	.+2      	; 0xf9c <__stack+0x69d>
     f9a:	45 c0       	rjmp	.+138    	; 0x1026 <__stack+0x727>
     f9c:	23 2d       	mov	r18, r3
     f9e:	34 2d       	mov	r19, r4
     fa0:	45 2d       	mov	r20, r5
     fa2:	56 2d       	mov	r21, r6
     fa4:	67 2d       	mov	r22, r7
     fa6:	78 2d       	mov	r23, r8
     fa8:	89 2d       	mov	r24, r9
     faa:	9b 2f       	mov	r25, r27
     fac:	33 d1       	rcall	.+614    	; 0x1214 <__cmpdi2>
     fae:	d8 f1       	brcs	.+118    	; 0x1026 <__stack+0x727>
     fb0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <s_o_m1.2922>
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <s_o_m2.2923>
     fba:	35 c0       	rjmp	.+106    	; 0x1026 <__stack+0x727>
     fbc:	a0 90 00 01 	lds	r10, 0x0100	; 0x800100 <__data_end>
     fc0:	b0 90 01 01 	lds	r11, 0x0101	; 0x800101 <__data_end+0x1>
     fc4:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <__data_end+0x2>
     fc8:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <__data_end+0x3>
     fcc:	e0 90 04 01 	lds	r14, 0x0104	; 0x800104 <__data_end+0x4>
     fd0:	f0 90 05 01 	lds	r15, 0x0105	; 0x800105 <__data_end+0x5>
     fd4:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <__data_end+0x6>
     fd8:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <__data_end+0x7>
     fdc:	23 2d       	mov	r18, r3
     fde:	34 2d       	mov	r19, r4
     fe0:	45 2d       	mov	r20, r5
     fe2:	56 2d       	mov	r21, r6
     fe4:	67 2d       	mov	r22, r7
     fe6:	78 2d       	mov	r23, r8
     fe8:	89 2d       	mov	r24, r9
     fea:	9b 2f       	mov	r25, r27
     fec:	13 d1       	rcall	.+550    	; 0x1214 <__cmpdi2>
     fee:	38 f0       	brcs	.+14     	; 0xffe <__stack+0x6ff>
     ff0:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <s_o_pv_g.2920>
     ff4:	8e 81       	ldd	r24, Y+6	; 0x06
     ff6:	81 11       	cpse	r24, r1
     ff8:	05 c0       	rjmp	.+10     	; 0x1004 <__stack+0x705>
     ffa:	83 ec       	ldi	r24, 0xC3	; 195
     ffc:	1b c0       	rjmp	.+54     	; 0x1034 <__stack+0x735>
     ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    1000:	88 23       	and	r24, r24
    1002:	89 f0       	breq	.+34     	; 0x1026 <__stack+0x727>
    1004:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <s_o_pv_g.2920>
    1008:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <s_o_kl.2919>
    100c:	83 e2       	ldi	r24, 0x23	; 35
    100e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <s_fsm_state.2917>
    1012:	83 ec       	ldi	r24, 0xC3	; 195
    1014:	0f c0       	rjmp	.+30     	; 0x1034 <__stack+0x735>
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	81 11       	cpse	r24, r1
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <__stack+0x727>
    101c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <s_fsm_state.2917>
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <__stack+0x727>
    1022:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <s_fsm_state.2917>
    1026:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <s_o_pv_g.2920>
    102a:	88 23       	and	r24, r24
    102c:	11 f0       	breq	.+4      	; 0x1032 <__stack+0x733>
    102e:	83 ee       	ldi	r24, 0xE3	; 227
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <__stack+0x735>
    1032:	83 ec       	ldi	r24, 0xC3	; 195
    1034:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <s_o_pv_o.2921>
    1038:	91 11       	cpse	r25, r1
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <__stack+0x745>
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <__stack+0x747>
    103e:	83 ec       	ldi	r24, 0xC3	; 195
    1040:	90 e1       	ldi	r25, 0x10	; 16
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <__stack+0x747>
    1044:	90 e1       	ldi	r25, 0x10	; 16
    1046:	89 2b       	or	r24, r25
    1048:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <s_o_m1.2922>
    104c:	91 11       	cpse	r25, r1
    104e:	07 c0       	rjmp	.+14     	; 0x105e <__stack+0x75f>
    1050:	07 c0       	rjmp	.+14     	; 0x1060 <__stack+0x761>
    1052:	83 ee       	ldi	r24, 0xE3	; 227
    1054:	98 e0       	ldi	r25, 0x08	; 8
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <__stack+0x761>
    1058:	83 ef       	ldi	r24, 0xF3	; 243
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <__stack+0x761>
    105e:	98 e0       	ldi	r25, 0x08	; 8
    1060:	89 2b       	or	r24, r25
    1062:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <s_o_m2.2923>
    1066:	91 11       	cpse	r25, r1
    1068:	94 e0       	ldi	r25, 0x04	; 4
    106a:	89 2b       	or	r24, r25
    106c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <s_o_kl.2919>
    1070:	91 11       	cpse	r25, r1
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <__stack+0x779>
    1074:	27 ef       	ldi	r18, 0xF7	; 247
    1076:	01 c0       	rjmp	.+2      	; 0x107a <__stack+0x77b>
    1078:	2f ef       	ldi	r18, 0xFF	; 255
    107a:	9f b7       	in	r25, 0x3f	; 63
    107c:	98 87       	std	Y+8, r25	; 0x08
    107e:	f8 94       	cli
    1080:	98 85       	ldd	r25, Y+8	; 0x08
    1082:	85 b9       	out	0x05, r24	; 5
    1084:	28 b9       	out	0x08, r18	; 8
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	8b b9       	out	0x0b, r24	; 11
    108a:	9f bf       	out	0x3f, r25	; 63
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <s_i_fb_t1.2918>
    1092:	03 c0       	rjmp	.+6      	; 0x109a <__stack+0x79b>
    1094:	83 ec       	ldi	r24, 0xC3	; 195
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	d6 cf       	rjmp	.-84     	; 0x1046 <__stack+0x747>
    109a:	29 96       	adiw	r28, 0x09	; 9
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	cd bf       	out	0x3d, r28	; 61
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	ff 90       	pop	r15
    10b0:	ef 90       	pop	r14
    10b2:	df 90       	pop	r13
    10b4:	cf 90       	pop	r12
    10b6:	bf 90       	pop	r11
    10b8:	af 90       	pop	r10
    10ba:	9f 90       	pop	r9
    10bc:	8f 90       	pop	r8
    10be:	7f 90       	pop	r7
    10c0:	6f 90       	pop	r6
    10c2:	5f 90       	pop	r5
    10c4:	4f 90       	pop	r4
    10c6:	3f 90       	pop	r3
    10c8:	08 95       	ret

000010ca <enter_sleep>:
    10ca:	88 0f       	add	r24, r24
    10cc:	81 60       	ori	r24, 0x01	; 1
    10ce:	83 bf       	out	0x33, r24	; 51
    10d0:	88 95       	sleep
    10d2:	83 b7       	in	r24, 0x33	; 51
    10d4:	8e 7f       	andi	r24, 0xFE	; 254
    10d6:	83 bf       	out	0x33, r24	; 51
    10d8:	08 95       	ret

000010da <main>:
}

int main (void)
{
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	1f 92       	push	r1
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts,
	 * most critical pins are handled first.
	 */

	DDRB  = 0b00111100;								// out: PB2: MP_M2, PB3: MP_M1, PB4: MP_PV_O, PB5: MP_PV_G
    10e4:	8c e3       	ldi	r24, 0x3C	; 60
    10e6:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b11000011;								// in:  PB0: NC, PB1: NC, PB6: MP_SK_G, PB7: MP_SK_O
    10e8:	83 ec       	ldi	r24, 0xC3	; 195
    10ea:	85 b9       	out	0x05, r24	; 5

	DDRC  = 0b00101000;								// out: PC3: MP_KL, PC5: SCL
    10ec:	88 e2       	ldi	r24, 0x28	; 40
    10ee:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b11110111;								// in:  PC0: NC, PC1: NC, PC2: NC, PC4: SDA, PC6: NC, PC7: NC
    10f0:	87 ef       	ldi	r24, 0xF7	; 247
    10f2:	88 b9       	out	0x08, r24	; 8

	DDRD  = 0b00000010;								// out: PD1: MP_TXD
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b11111111;								// in:  PD0: MP_RXD, PD2: MP_INT, PD3: NC, PD4: MP_FB, PD5: NC, PD6: MP_SA_G, PD7: MP_SA_O
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	8b b9       	out	0x0b, r24	; 11

	// Analog input: Digital Disable Register
	DIDR0 = 0b00000111;								// PC0: NC_A, PC1: NC_A, PC2: NC_A
    10fc:	87 e0       	ldi	r24, 0x07	; 7
    10fe:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>

	/* Rapid I/O settings */
	s_io_preinit();

	/* Init of sub-modules */
	sysclk_init();	PRR = 0b11101011;			// For debugging this module has to be powered on, again
    1102:	47 d0       	rcall	.+142    	; 0x1192 <sysclk_init>
    1104:	8b ee       	ldi	r24, 0xEB	; 235
    1106:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	}
	#endif

	/* TC1 global clock - OC1A: NC */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    110a:	68 e0       	ldi	r22, 0x08	; 8
    110c:	80 e0       	ldi	r24, 0x00	; 0

		TCCR1A  = (0b00  << COM1A0)		 			// OC1A: disconnected - normal port function
    110e:	5a d0       	rcall	.+180    	; 0x11c4 <sysclk_enable_module>
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				| (0b01  << WGM10);					// WGM: 0b1001 = PWM, Phase and Frequency Correct / Update on BOTTOM / TOP @ OCR1A

		TCCR1B  = ( 0b10 << WGM12)
    1116:	91 e1       	ldi	r25, 0x11	; 17
    1118:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
				| (0b001 << CS10);					// CLKio DIV1, no prescaling --> 8 MHz

		TCNT1H  = 0b00000000           ;			// Clear current value for synchronous start (when restarting without reset)
    111c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		barrier();
		TCNT1L	=            0b00000000;
    1120:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

		OCR1AH  = (uint8_t) (C_TC1_TOP_VAL >> 8);	// 1 kHz overflow frequency (1 ms)
    1124:	9f e0       	ldi	r25, 0x0F	; 15
    1126:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		barrier();
		OCR1AL  = (uint8_t) (C_TC1_TOP_VAL & 0xff);
    112a:	90 ea       	ldi	r25, 0xA0	; 160
    112c:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

		TIFR1   = 0b00100111;						// Clear all flags (when restarting without reset)
		TIMSK1  = _BV(TOIE1);						// TOIE1 interrupt
    1130:	97 e2       	ldi	r25, 0x27	; 39
	ioport_init();
//	s_adc_init();
	s_tc_init();

	/* I/O pins go active here */
	board_init();
    1132:	96 bb       	out	0x16, r25	; 22
    1134:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	reset_cause_t rc = reset_cause_get_causes();
	g_resetCause = rc;
    1138:	2b d0       	rcall	.+86     	; 0x1190 <board_init>
    113a:	84 b7       	in	r24, 0x34	; 52
	if (rc & CHIP_RESET_CAUSE_EXTRST	||
		rc & CHIP_RESET_CAUSE_BOD_CPU	||
    113c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_resetCause>
    1140:	98 2f       	mov	r25, r24
		rc & CHIP_RESET_CAUSE_POR		||
    1142:	97 70       	andi	r25, 0x07	; 7
    1144:	11 f4       	brne	.+4      	; 0x114a <main+0x70>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1146:	81 11       	cpse	r24, r1
    1148:	16 c0       	rjmp	.+44     	; 0x1176 <main+0x9c>
	cpu_irq_disable();
    114a:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    114c:	89 83       	std	Y+1, r24	; 0x01
/* HELPERS */

static void s_reset_global_vars(void)
{
	irqflags_t flags	= cpu_irq_save();
	g_timer_abs_msb		= 0ULL;
    114e:	f8 94       	cli
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <g_timer_abs_msb>
    1156:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <g_timer_abs_msb+0x1>
    115a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <g_timer_abs_msb+0x2>
    115e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <g_timer_abs_msb+0x3>
    1162:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <g_timer_abs_msb+0x4>
    1166:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <g_timer_abs_msb+0x5>
    116a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <g_timer_abs_msb+0x6>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    116e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <g_timer_abs_msb+0x7>
		/* DEBUG */
		asm_break();
	}

	/* Read non-volatile settings */
	eeprom_nvm_settings_read(C_EEPROM_NVM_SETTING_ALL);			// load all entries from NVM
    1172:	8f bf       	out	0x3f, r24	; 63
    1174:	02 c0       	rjmp	.+4      	; 0x117a <main+0xa0>

	/* I2C interface - 10 MHz-Ref-Osc. second display */
//	s_twi_init(TWI_SLAVE_ADDR_SMARTLCD, TWI_SLAVE_ADDR_BM);

	/* All interrupt sources prepared here - IRQ activation */
	cpu_irq_enable();
    1176:	0e 94 74 00 	call	0xe8	; 0xe8 <asm_break>
    117a:	8f ef       	ldi	r24, 0xFF	; 255
    117c:	63 db       	rcall	.-2362   	; 0x844 <eeprom_nvm_settings_read>
    117e:	78 94       	sei
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <runmode>
    1186:	39 db       	rcall	.-2446   	; 0x7fa <get_abs_time_ms>
    1188:	67 db       	rcall	.-2354   	; 0x858 <task>
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	9e df       	rcall	.-196    	; 0x10ca <enter_sleep>
    118e:	fb cf       	rjmp	.-10     	; 0x1186 <main+0xac>

00001190 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    1190:	08 95       	ret

00001192 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	1f 92       	push	r1
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    11a2:	8f b7       	in	r24, 0x3f	; 63
    11a4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    11a6:	f8 94       	cli
	return flags;
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
    11aa:	5f 93       	push	r21
    11ac:	50 e8       	ldi	r21, 0x80	; 128
    11ae:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    11b8:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11ba:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
    11bc:	0f 90       	pop	r0
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

000011c4 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	1f 92       	push	r1
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    11ce:	9f b7       	in	r25, 0x3f	; 63
    11d0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    11d2:	f8 94       	cli
	return flags;
    11d4:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
    11d6:	81 11       	cpse	r24, r1
    11d8:	06 c0       	rjmp	.+12     	; 0x11e6 <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
    11da:	e4 e6       	ldi	r30, 0x64	; 100
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	60 95       	com	r22
    11e0:	80 81       	ld	r24, Z
    11e2:	68 23       	and	r22, r24
    11e4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11e6:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
    11e8:	0f 90       	pop	r0
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	08 95       	ret

000011f0 <__tablejump2__>:
    11f0:	ee 0f       	add	r30, r30
    11f2:	ff 1f       	adc	r31, r31
    11f4:	05 90       	lpm	r0, Z+
    11f6:	f4 91       	lpm	r31, Z
    11f8:	e0 2d       	mov	r30, r0
    11fa:	09 94       	ijmp

000011fc <__adddi3_s8>:
    11fc:	00 24       	eor	r0, r0
    11fe:	a7 fd       	sbrc	r26, 7
    1200:	00 94       	com	r0
    1202:	2a 0f       	add	r18, r26
    1204:	30 1d       	adc	r19, r0
    1206:	40 1d       	adc	r20, r0
    1208:	50 1d       	adc	r21, r0
    120a:	60 1d       	adc	r22, r0
    120c:	70 1d       	adc	r23, r0
    120e:	80 1d       	adc	r24, r0
    1210:	90 1d       	adc	r25, r0
    1212:	08 95       	ret

00001214 <__cmpdi2>:
    1214:	2a 15       	cp	r18, r10
    1216:	3b 05       	cpc	r19, r11
    1218:	4c 05       	cpc	r20, r12
    121a:	5d 05       	cpc	r21, r13
    121c:	6e 05       	cpc	r22, r14
    121e:	7f 05       	cpc	r23, r15
    1220:	80 07       	cpc	r24, r16
    1222:	91 07       	cpc	r25, r17
    1224:	08 95       	ret

00001226 <__cmpdi2_s8>:
    1226:	00 24       	eor	r0, r0
    1228:	a7 fd       	sbrc	r26, 7
    122a:	00 94       	com	r0
    122c:	2a 17       	cp	r18, r26
    122e:	30 05       	cpc	r19, r0
    1230:	40 05       	cpc	r20, r0
    1232:	50 05       	cpc	r21, r0
    1234:	60 05       	cpc	r22, r0
    1236:	70 05       	cpc	r23, r0
    1238:	80 05       	cpc	r24, r0
    123a:	90 05       	cpc	r25, r0
    123c:	08 95       	ret

0000123e <eeprom_read_byte>:
    123e:	f9 99       	sbic	0x1f, 1	; 31
    1240:	fe cf       	rjmp	.-4      	; 0x123e <eeprom_read_byte>
    1242:	92 bd       	out	0x22, r25	; 34
    1244:	81 bd       	out	0x21, r24	; 33
    1246:	f8 9a       	sbi	0x1f, 0	; 31
    1248:	99 27       	eor	r25, r25
    124a:	80 b5       	in	r24, 0x20	; 32
    124c:	08 95       	ret

0000124e <eeprom_write_byte>:
    124e:	26 2f       	mov	r18, r22

00001250 <eeprom_write_r18>:
    1250:	f9 99       	sbic	0x1f, 1	; 31
    1252:	fe cf       	rjmp	.-4      	; 0x1250 <eeprom_write_r18>
    1254:	1f ba       	out	0x1f, r1	; 31
    1256:	92 bd       	out	0x22, r25	; 34
    1258:	81 bd       	out	0x21, r24	; 33
    125a:	20 bd       	out	0x20, r18	; 32
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	fa 9a       	sbi	0x1f, 2	; 31
    1262:	f9 9a       	sbi	0x1f, 1	; 31
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	08 95       	ret

0000126a <_exit>:
    126a:	f8 94       	cli

0000126c <__stop_program>:
    126c:	ff cf       	rjmp	.-2      	; 0x126c <__stop_program>
